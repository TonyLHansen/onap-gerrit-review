#!/usr/bin/env python3

""" extract a value (specified by an xpath) from an xml file """

import argparse
import os
import re
import sys

import xml.etree.ElementTree as ET

GITVERSIONSTAMP = "2022-02-18-21-59"


def dump_xml(elroot, prefix, *, include_children=False):
    """print info on an xml element"""
    # print(f"{prefix}elroot={elroot}")
    print(f"{prefix}elroot.tag={elroot.tag}")
    # print(f"{prefix}dir(elroot)={dir(elroot)}")
    print(f"{prefix}elroot.attrib={elroot.attrib}")
    print(f"{prefix}elroot.getchildren()={list(elroot)}")
    if include_children:
        for ch in elroot:
            dump_xml(ch, f"    {prefix}")


def get_xml_text(root, path):
    """
    Extract the text for the element at the given path.
    """
    for item in root.findall(path):
        return item.text.strip() if item.text is not None else None
    return None


def get_xml_text_by_attribute(root, path, attribute, secondary_path):
    """
    For some reason an xpath './volume/article/articleinfo/date[datetype="OriginalPub"]/year'
    doesn't seem to be working. So get all
    """
    ret = {}
    for date in root.findall(path):
        k = date.attrib.get(attribute)
        v = get_xml_text(date, secondary_path)
        if k:
            ret[k] = v
    return ret


def get_xml_first_of(dsrch, knames):
    """
    Loop over the keys in knames, returning the first one in dsrch found.
    None if none present.
    """
    for k in knames:
        v = dsrch.get(k)
        if k:
            return v
    return None


def parent_pomfile(args, pomfile):
    """from a given pomfile name, generate a pomfile name in its parent directory"""
    if args.verbose > 2:
        print(f"pomfile={pomfile}", file=sys.stderr)
    dirname = os.path.dirname(pomfile)
    if dirname == "":
        dirname = "."

    dirdirname = os.path.dirname(dirname)
    if dirdirname == "":
        dirdirname = "."

    npomfile = dirdirname + "/pom.xml"
    ret = os.path.abspath(npomfile)
    if args.verbose > 2:
        print(f"    =>{ret}", file=sys.stderr)
    return ret


def expand_property_reference(args, curroot, fname, varname):
    """extract a property name from the current file or its parents"""

    pomfiles = [os.path.abspath("pom.xml")]
    with open(args.pomdirs) as fp:
        for dirname in fp:
            dirname = dirname.strip()
            pomfiles.append(os.path.abspath(dirname + "/pom.xml"))

    if args.verbose > 1:
        print(f"pomfiles={pomfiles}", file=sys.stderr)
        print(f"fname={fname}", file=sys.stderr)
    ver = get_xml_text(curroot, f"{args.namespace}properties/{args.namespace}{varname}")
    if args.verbose > 1:
        print(f"ver={ver}", file=sys.stderr)

    if ver is not None:
        if args.verbose > 1:
            print(f"found {ver}", file=sys.stderr)
        return ver
    for _ in range(len(pomfiles)):
        fname = parent_pomfile(args, fname)
        if args.verbose > 1:
            print(f"parents: {fname}", file=sys.stderr)
        if fname in pomfiles:
            if args.verbose > 1:
                print(f"found {fname} in pomfiles", file=sys.stderr)
            try:
                with open(fname) as fd:
                    xml_contents = fd.read()
                    newroot = ET.fromstring(xml_contents)
                    ver = get_xml_text(newroot, f"{args.namespace}properties/{args.namespace}{varname}")
                    if ver is not None:
                        if args.verbose > 1:
                            print(f"found {ver}", file=sys.stderr)
                        return ver

            except Exception as e:
                print(f"{args.input}: WARNING: BAD XML found: {e}", file=sys.stderr)

    return f"${{{varname}}}"


def process(args, fd, fname):
    """process an xml file"""
    xml_contents = fd.read()
    try:
        root = ET.fromstring(xml_contents)
    except Exception as e:
        print(f"{args.input}: WARNING: BAD XML found: {e}")
        return

    # dump_xml(root, "", include_children=True)
    if args.attributes:
        sys.exit("-a not implemented")

    else:
        for xpath in args.xpath:
            # print(f"root.findall({xpath})={root.findall(xpath)}")
            gi = get_xml_text(root, xpath)
            if args.verbose:
                print(f"xpath={xpath}, gi={gi}")
            # elif gi is not None:
            else:
                m = re.match(r"\${([^}]*)}$", str(gi))
                if m:
                    if args.verbose:
                        print(f"FOUND a property reference: {gi}, {m.group(1)}", file=sys.stderr)
                    vers = expand_property_reference(args, root, fname, m.group(1))
                    print(vers)

                else:
                    print(gi)


def main():
    """main processing"""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-i", "--input", type=str, help="File to read, else stdin", default="-")
    parser.add_argument("-a", "--attributes", help="extract attributes")
    # parser.add_argument("-A", "--only-attributes", help="With -a, only extract these ','-separated attributes")
    # parser.add_argument("-m", "--match", help="Treat xpath parameters as patterns to match")
    parser.add_argument("-p", "--pomdirs", type=str, help="Directories with pom.xml files")
    parser.add_argument("-n", "--namespace", type=str, help="Namespace for pom.xml")
    parser.add_argument("-v", "--verbose", help="Verbose, may be specified multiple times", action="count", default=0)
    parser.add_argument("-V", "--version", action="store_true", help="Print the version")
    parser.add_argument("xpath", nargs="+")
    args = parser.parse_args()

    if args.version:
        print(f"Version: {GITVERSIONSTAMP}")

    if args.input == "-":
        process(args, sys.stdin, None)

    else:
        with open(args.input) as fd:
            process(args, fd, args.input)


if __name__ == "__main__":
    main()
