#!/bin/bash

# shellcheck disable=SC2197
# SC2197: allow fgrep

GITVERSIONSTAMP="2022-09-20-13-12"

usage()
{
    exec 1>&2
    [ $# -gt 0 ] && echo "$@"
    echo "Usage: $0 [common-options] [-b branch] [-d depth] git pull . . ."
    echo "Usage: $0 [common-options] [-c] local-git-directory-name"
    echo "Usage: $0 -V"
    echo "Common options: [-E] [-S] [-m message] [-t] [-q] [-x] [-Q]"
    echo "To use git pull, click the vertical ... in the browser and grab the Pull string."
    echo "Invoke as $0 git pull . . ."
    echo "For example,"
    echo "$0 git pull \"https://TonyLHansen@gerrit.onap.org/r/a/dcaegen2/platform/plugins\" refs/changes/56/119956/11"
    echo
    echo "To use locally, provide the path to a local clone of the code, that may have been modified."
    echo
    echo "When doing the git clone for the git pull, these options come into play:"
    echo " -b branch - use this branch name instead of the default master"
    echo " -d depth - use this depth instead of the default of 10"
    echo
    echo "When using a local directory, these options come into play:"
    echo " -C do not clear out .tox, .pytest_cache, *.egg-info, htmlcov directories before scanning"
    echo
    echo "Thse options may always be used:"
    echo " -m message - do not report on this message. May be specified multiple times."
    echo " -E Do not exit non-zero on failures (also can be disabled using '-m exit-code-on-errors')"
    echo " -t When showing leading tabs, show all of them (pass -t to onap-gerrit-review-step2)."
    echo " -S show successes as well as errors (turn off -s in onap-gerrit-review-step2)."
    echo " -q Do not print a message about how to suppress error/warning messages when there are errors/warnings"
    echo " -Q Force the message to be printed about how to suppress error/warning messages"
    echo " -x Turn on -x mode"
    echo " -X Turn on verbosity mode for sub-components. May be specified multiple times for additional verbosity."
    echo " -V Show the version stamp and exit"
    echo
    echo "Environment variables:"
    echo "    ONAP_GERRIT_REVIEW_PYLINTRC If set, run 'pylint' with PYLINTRC set to this value."
    echo "    ONAP_GERRIT_REVIEW_PYDOCSTYLE If set, run 'pydocstyle'. Must be one of pep257, numpy or google."
    echo "    ONAP_GERRIT_REVIEW_BLACK If set, run 'black --line-length 120' on the python files."
    echo "    ONAP_GERRIT_REVIEW_JSLINTERS If set to 'jshint', run it on the javascript files."
    echo "    ONAP_GERRIT_REVIEW_DOCKERLINTER If set, run 'dockerlinter' on Dockerfile files."
    echo "    ONAP_GERRIT_REVIEW_INFO_YAML_SCHEMA If set, run schema verification for INFO.yaml files."
    exit 1
}

case "$GERRIT_PROJECT" in
    *services* )
	env
	;;
esac

SILENT=-s
CLEAN=true
BRANCH=
DEPTH=
ALLTABS=
EXITCODEONFAILURE=true
SUPPRESSMESSAGES=
FORCESUPPRESSMESSAGES=
SUBVERBOSITY=
RMMESSAGES=
while getopts b:Cd:Em:qQStVxX opt
do
    case "$opt" in
	b ) BRANCH="$OPTARG" ;;
	C ) CLEAN=false ;;
	d ) DEPTH="$OPTARG" ;;
	E ) EXITCODEONFAILURE=false ;;
	m ) [ -z "$RMMESSAGES" ] && RMMESSAGES="-m"
	    RMMESSAGES="$RMMESSAGES ${OPTARG//[[:space:]]/,}"
	    ;;
	q ) SUPPRESSMESSAGES=-q ;;
	Q ) FORCESUPPRESSMESSAGES=-Q ;;
	S ) SILENT= ;;
	t ) ALLTABS=-a ;;
	V ) echo "Version: $GITVERSIONSTAMP"; exit 0 ;;
	x ) set -x ;;
	X ) SUBVERBOSITY="$SUBVERBOSITY -X" ;;
	* ) usage ;;
    esac
done
shift $(( OPTIND - 1))

die()
{
    exec 1>&2
    # shellcheck disable=SC2001
    echo "$@" | sed 's/{nl}/\n/g'
    exit 99
}

TMP1=$(mktemp /tmp/ogr1-1.XXXXXXXXXX)
TMP2=$(mktemp /tmp/ogr1-2.XXXXXXXXXX)
trap 'rm -f "$TMP1" "$TMP2"' 0 1 2 3 15

export EDITOR=true # allow git pull to be done without a popup editor

verifypaths()
{
    type onap-gerrit-review-step2 >/dev/null 2>&1 ||
	die "Cannot find onap-gerrit-review-step2 in your PATH." \
	    "Make sure that the directory where the tools are installed is in your PATH."
}

verifypaths

scan_local()
{
    [ -d "$1" ] || usage "$1 is not a directory"
    [ -z "$BRANCH" ] || usage "-b not supported for local git directory name"

    cd "$1" || die "Cannot cd $1"
    verifypaths # make sure things are STILL accessible after the cd

    [ -d ".git" ] || die "$1 is not a git repository"
    CURDIR=$PWD

    GITPATH=$( git remote -v | fgrep "(fetch)" | sed 1q | awk '{print $2}' )
    GITPATHBASE=$(basename "$GITPATH" .git)
    GITBRANCH=$( git branch | grep '^[*]' | awk '{print $2}' )
    echo "Using branch $GITBRANCH"

    TMPDIR=$(mktemp -d /tmp/ogr.XXXXXXXXXX)
    cd "$TMPDIR" || die "Cannot cd $TMPDIR"
    verifypaths # make sure things are STILL accessible after the cd

    # get a copy of the original code
    if [ -n "$GITBRANCH" ]
    then git clone --depth 1 -b "$GITBRANCH" "$GITPATH" || die "Cannot clone $GITPATH"
    else git clone --depth 1 "$GITPATH" || die "Cannot clone $GITPATH"
    fi

    cd "$GITPATHBASE" || die "Cannot cd $GITPATHBASE"
    git log > .temp.git-log || die "Cannot create .temp.git-log"

    # save the original code, copy in the new code
    cd "$TMPDIR" || die "Cannot cd $TMPDIR"
    mv "$GITPATHBASE" "$GITPATHBASE.sv"
    cp -r "$CURDIR" "$TMPDIR/$GITPATHBASE"

    # reset the timestamp on all files
    touch "$TMP1"
    find "$GITPATHBASE" "$GITPATHBASE.sv" -type f -exec touch -r "$TMP1" {} +
    sleep 1

    # now reset the timestamp of any files that have been changed
    cd "$GITPATHBASE" || die "Cannot cd $GITPATHBASE"

    "$CLEAN" &&
	find . -type d '(' -name .tox -o -name .pytest_cache -o -name htmlcov -o -name '*.egg-info' ')' -exec rm -rf {} + &&
	find . -type f '(' -name coverage.xml -o -name xunit-results.xml -o -name .coverage ')' -exec rm -f {} +

    find . -type f | fgrep -v /.git/ | fgrep -v /.tox/ |
	while read -r fname
	do
	    if cmp "$TMPDIR/$GITPATHBASE/$fname" "$TMPDIR/$GITPATHBASE.sv/$fname" > /dev/null 2>&1
	    then : "$GITPATHBASE/$fname and $GITPATHBASE.sv/$fname are the same"
	    else touch "$fname"
	    fi
	done

    mv "$TMPDIR/$GITPATHBASE.sv/.temp.git-log" "$TMPDIR/$GITPATHBASE/.temp.git-log"

    : SILENT="$SILENT"
    : ALLTABS="$ALLTABS"
    : SUPPRESSMESSAGES="$SUPPRESSMESSAGES"
    : FORCESUPPRESSMESSAGES="$FORCESUPPRESSMESSAGES"
    : SUBVERBOSITY="$SUBVERBOSITY"
    : RMMESSAGES="$RMMESSAGES"

    # shellcheck disable=SC2086
    # SC2086: double quote to prevent globbing and word splitting
    echo Running: onap-gerrit-review-step2 -l $SILENT $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE"
    # shellcheck disable=SC2086
    [ -n "$SILENT" ] && echo To see all messages, use: onap-gerrit-review-step2 -l $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE"
    # shellcheck disable=SC2086
    onap-gerrit-review-step2 -l $SILENT $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE" || exitcode=1
}

scan_git_pull()
{
    # git pull "https://TonyLHansen@gerrit.onap.org/r/a/dcaegen2/platform/plugins" refs/changes/56/119956/11

    [ "$1" = git ] || usage "arg 1 should be 'git'"
    [ "$2" = pull ] || usage "arg 2 should be 'pull'"

    GITPATH="$3"
    GITPATHBASE=$(basename "$GITPATH")
    GITREF="$4"

    TMPDIR=$(mktemp -d /tmp/ogr.XXXXXXXXXX)
    cd "$TMPDIR" || die "Cannot cd $TMPDIR"
    verifypaths # make sure things are STILL accessible after the cd

    [ -z "$DEPTH" ] && DEPTH="10 20 30 40 50"
    worked=false
    for depth in $DEPTH
    do
	rm -rf "${TMPDIR:?}/$GITPATHBASE"
	cd "$TMPDIR" || die "Cannot cd $TMPDIR"
	if [ -n "$BRANCH" ]
	then git clone --depth "$depth" -b "$BRANCH" "$GITPATH" || die "Cannot clone $GITPATH"
	else git clone --depth "$depth" "$GITPATH" || die "Cannot clone $GITPATH"
	fi
	cd "$TMPDIR/$GITPATHBASE" || die "Cannot cd $TMPDIR/$GITPATHBASE"
	git log > .temp.git-log || die "Cannot create .temp.git-log"
	sleep 1
	if git pull "$GITPATH" "$GITREF"
	then
	    worked=true
	    break
	fi
    done
    if ! "$worked"
    then
	die "Cannot pull $GITPATH $GITREF using a maximum depth of $depth.{nl}{nl}!!!!!!!!!!!!!!!!{nl}Do you have the correct branch or is the depth deep enough?{nl}!!!!!!!!!!!!!!!!"
    fi
    git log > .temp.git-log2 || die "Cannot create .temp.git-log2"
    case "$GERRIT_PROJECT" in
	*snmptrap* ) diff .temp.git-log .temp.git-log2 ;;
    esac

    : SILENT="$SILENT"
    : ALLTABS="$ALLTABS"
    : SUPPRESSMESSAGES="$SUPPRESSMESSAGES"
    : FORCESUPPRESSMESSAGES="$FORCESUPPRESSMESSAGES"
    : SUBVERBOSITY="$SUBVERBOSITY"
    : RMMESSAGES="$RMMESSAGES"

    # shellcheck disable=SC2086
    # SC2086: double quote to prevent globbing and word splitting
    echo Running: onap-gerrit-review-step2 -l $SILENT $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE"
    # shellcheck disable=SC2086
    [ -n "$SILENT" ] && echo To see all messages, use: onap-gerrit-review-step2 -l $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE"
    # shellcheck disable=SC2086
    onap-gerrit-review-step2 -l $SILENT $ALLTABS $SUPPRESSMESSAGES $FORCESUPPRESSMESSAGES $SUBVERBOSITY $RMMESSAGES "$TMPDIR/$GITPATHBASE" || exitcode=1
}

exitcode=0

if [ $# -eq 1 ]
then scan_local "$@"
elif [ $# -eq 4 ]
then scan_git_pull "$@"
else usage
fi

if "$EXITCODEONFAILURE"
then exit $exitcode
else exit 0
fi
