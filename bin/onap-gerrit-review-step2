#!/bin/bash

# shellcheck disable=SC2035,SC2196,SC2197
# SC2035: use ./*glob* so names with dashes won't become options
# SC2196: allow use of egrep
# SC2197: allow use of fgrep

GITVERSIONSTAMP='2022-01-14-22-03'

usage()
{
    echo "Usage: $0 [-l] [-s] [-x] [-X] directory"
    echo "Usage: $0 -V"
    echo " -s Only show errors"
    echo " -l Limit errors to new directories/files modified by gerrit drop. Requires that .temp.git-log (and optionally .temp.git-log2) exists."
    echo " NOTE: The timestamp of .temp.git-log is used to determine which files were changed in the pull request."
    echo " -x Turn on -x mode"
    echo " -V show the version stamp and exit"
    echo " -X Turn on verbosity mode for sub-components. May be specified multiple times for additional verbosity."
    echo
    echo "Environment variables:"
    echo "    ONAP_GERRIT_REVIEW_PYLINTRC If set, run 'pylint' with PYLINTRC set to this value."
    echo "    ONAP_GERRIT_REVIEW_PYDOCSTYLE If set, run 'pydocstyle'. Must be one of pep257, numpy or google."
    echo "    ONAP_GERRIT_REVIEW_BLACK If set, run 'black --line-length 120' on the python files."
    echo "    ONAP_GERRIT_REVIEW_JSLINTERS If set to 'jshint', run it on the javascript files."
    echo "    ONAP_GERRIT_REVIEW_DOCKERLINTER If set, run 'dockerlinter' on Dockerfile files."
    exit 1
}

die()
{
    echo "$@" 1>&2
    exit 99
}

dirnameloop()
{
    while read -r path
    do
	dirname "$path"
    done
}

verifypaths()
{
    [ $# -eq 0 ] && set -- \
			onap-gerrit-review-extract-xml \
			onap-gerrit-review-verify-eol \
			onap-gerrit-review-verify-json \
			onap-gerrit-review-verify-releasefile \
			onap-gerrit-review-verify-yaml \
			onap-gerrit-review-verify-xml
    for i
    do
	type "$i" >/dev/null 2>&1 ||
	    die "Cannot find $i in your PATH." \
		"Make sure that the directory where the tools are installed is in your PATH."
    done
}

verifypaths

TMPFILEDIR=$(mktemp -d /tmp/ogr2.XXXXXXXXXX)
# trap 'rm -rf "$TMPFILEDIR"' 0 1 2 3 15
NEWFILES="$TMPFILEDIR"/newfiles
ALLFILES="$TMPFILEDIR"/allfiles
FLIST="$TMPFILEDIR"/flist
WDIRS="$TMPFILEDIR"/wdirs
POMDIRS="$TMPFILEDIR"/pomdirs
NEWDIRS="$TMPFILEDIR"/newdirs
ALLWDIRS="$TMPFILEDIR"/allwdirs
ALLPOMDIRS="$TMPFILEDIR"/allpomdirs
CLFILES="$TMPFILEDIR"/clfiles
POMFILES="$TMPFILEDIR"/pomfiles
JAVAFILES="$TMPFILEDIR"/javafiles
YAMLFILES="$TMPFILEDIR"/yamlfiles
COPYRIGHTFILES="$TMPFILEDIR"/copyrightfiles
COPYRIGHTLIST="$TMPFILEDIR"/copyrightlist
COPYRIGHTCHECKED="$TMPFILEDIR"/copyrightchecked
RELEASEFILES="$TMPFILEDIR"/releasefiles
JSHINTFILE="$TMPFILEDIR"/JSHINTFILE
TMP="$TMPFILEDIR"/tmp
TMP2="$TMPFILEDIR"/tmp2
TMP3="$TMPFILEDIR"/tmp3
TMP4="$TMPFILEDIR"/tmp4

YEAR=$(date +%Y)
POMNS='{http://maven.apache.org/POM/4.0.0}'

# checkNoEOL should skip over non-text files (.png, .jpg, ...)
export ONAP_GERRIT_REVIEW_SKIP_EXTENSIONS=".crt .der .egg .eot .exe .gz .ico .jar .jks .jpg .png .pyc .so .tgz .ttf .whl .woff .woff2 .zip"
# These file types MUST have copyrights
COPYRIGHT_EXTENSIONS="cpp c cc h java js py xml clj css erl ftl html jsp kt rst scala sh sql tpl ts"
# These file types MUST not have leading tabs
NOTAB_EXTENSIONS="cpp c cc h clj css erl ftl jsp kt scala sh sql tpl ts"

smso=$(tput smso)
rmso=$(tput rmso)
export smso rmso

dos2unix()
{
    cat "$@" | tr -d '\r'
}

version_properties_version()
{
    local file="$1"
    local major; major=$(dos2unix "$file" | grep "^major=" | sed 's/^.*=//')
    local minor; minor=$(dos2unix "$file" | grep "^minor=" | sed 's/^.*=//')
    local patch; patch=$(dos2unix "$file" | grep "^patch=" | sed 's/^.*=//')
    echo "$major.$minor.$patch"
}

setup_version()
{
    local file="$1"
    grep "^[[:space:]]*version[[:space:]]*=" "$file" |
	sed -e 's/^[^=]*=[[:space:]]*"//' -e "s/^[^=]*=[[:space:]]*'//" -e 's/".*//' -e "s/'.*//"
}

package_version()
{
    local file="$1"
    grep '^[[:space:]]*"version"[[:space:]]*:' "$file" |
	sed -e 's/^[^:]*:[[:space:]]*"//' -e "s/^[^:]*:[[:space:]]*'//" -e 's/".*//' -e "s/'.*//"
}

check_disabled_message()
{
    local code; code="$1"
    # Loop through $POMDIR, $POMDIR/.., $POMDIR/../.. up to
    # the root, looking for pom.xml files. For each, extract
    # the properties/onap-gerrit-review block and check it
    # for "-$code".
    local nmdir
    local pomdir; pomdir=$POMDIR
    while :
    do
	if [ "$pomdir" = "$TOPDIR" ] || [ "$pomdir" = . ]
	then nmdir=topdir
	else nmdir="${pomdir//\//--}"
	fi
	local tmpfile; tmpfile="$TMPFILEDIR/$nmdir--pom.xml"
	if [ ! -f "$tmpfile" ]
	then
	    : "Creating file $tmpfile"
	    if [ -f "$pomdir/pom.xml" ]
	    then onap-gerrit-review-extract-xml -i "$pomdir/pom.xml" "${POMNS}properties/${POMNS}onap-gerrit-review" | tr ', \t' '\n' | grep -v '^$' > "$tmpfile"
	    else : > "$tmpfile"
	    fi
	fi
	if grep "^-$code$" "$tmpfile" > /dev/null
	then return 0
	fi
	if [ "$pomdir" = "$TOPDIR" ] || [ "$pomdir" = . ]
	then break
	fi
	pomdir=$(dirname "$pomdir")
    done
    return 1
}

laststatus=
error()
{
    code="$1"
    shift
    exec 1>&2
    if check_disabled_message "$code"
    then
	"$SILENT" || echo "Suppressing $code $*"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    elif [ -f "$HOME"/.onap-gerrit-review.rc ] &&
	     grep "^-$code" "$HOME"/.onap-gerrit-review.rc >/dev/null
    then
	: "ignoring $code"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    else
	(( errorcount = errorcount + 1 ))
	[ "$laststatus" = error ] || "$SILENT" || echo
	laststatus=error
	echo "${smso}ERROR: ($code) $*${rmso}"
	return 0
    fi
}

warning()
{
    code=$1
    shift
    exec 1>&2
    if check_disabled_message "$code"
    then
	"$SILENT" || echo "Suppressing $code $*"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    elif [ -f "$HOME"/.onap-gerrit-review.rc ] &&
	     grep "$code" "$HOME"/.onap-gerrit-review.rc >/dev/null
    then
	: "ignoring $code"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    else
	(( warningcount = warningcount + 1 ))
	[ "$laststatus" = warning ] || "$SILENT" || echo
	laststatus=warning
	echo "${smso}WARNING: ($code) $*${rmso}"
	return 0
    fi
}

success()
{
    (( successcount = successcount + 1 ))
    exec 1>&2
    [ "$laststatus" = success ] || "$SILENT" || echo
    laststatus=success
    "$SILENT" || echo "SUCCESS: $*"
}

hasTypeCode()
{
    [ -n "$(find "$2" -type f -name "*.$1" -print)" ]
}

hasPythonCode()
{
    hasTypeCode py "$@" 
}

hasJavascriptCode()
{
    hasTypeCode js "$@" 
}

checkCopyright()
{
    if [ "$1" = -w ]
    then ERROR=warning; shift
    else ERROR=error
    fi

    "$SILENT" || echo "Checking for Copyright in $CHECKTYPE files"

    if [ $# -eq 0 ]
    then success "No $CHECKTYPE files to look in for copyrights"
    else
	for file
	do
	    echo "$file" >> "$COPYRIGHTCHECKED"
	    if grep "Copyright[[:space:]]*[(][Cc][)].*$YEAR" "$file" /dev/null >> "$COPYRIGHTLIST" ||
		    grep "Copyright.*$YEAR" "$file" /dev/null >> "$COPYRIGHTLIST"
	    then success "Copyright $YEAR found in $file"
		 grep -l "Copyright .*$YEAR" "$file" /dev/null >> "$COPYRIGHTFILES"
		 
		 if grep "LICENSE_START" "$file" > /dev/null
		 then success "LICENSE_START found in $file"
		 else error license-start-not-found-in-file "LICENSE_START not found in $file"
		 fi
		 
		 if grep -n "LICENSE_END" "$file" > "$TMP"
		 then success "LICENSE_END found in $file"
		 else error license-start-not-found-in-file "LICENSE_END not found in $file"
		 fi
		 LICENSE_END_LINE=$(sed 's/:.*//' < "$TMP" | sed 1q)
		 
		 if [ -n "$LICENSE_END_LINE" ]
		 then 
		     if [ "$( grep -c Copyright "$file" )" -gt 1 ]
		     then 
			 grep -n Copyright "$file" | sed 's/:.*//' > "$TMP"
			 top=$(sed 1q "$TMP")
			 bottom=$(tail -n 1 "$TMP")

			 if [ "$bottom" -gt "$LICENSE_END_LINE" ]
			 then bottom=$(( LICENSE_END_LINE - 1 ))
			 fi
			 # cat "$TMP"
			 seq "$top" "$bottom" | sort > "$TMP2"
			 if ! diff "$TMP" "$TMP2" >  "$TMP3"
			 then
			     # echo "$file"
			     # echo $top $bottom
			     egrep -n '([^[:space:][:alnum:]])\1\1\1' "$file" | sed 's/:.*//' | sort > "$TMP4"
			     warning copyright-lines-have-separators "Separator lines found within a list of Copyright lines:"
			     # shellcheck disable=SC2046
			     # SC2046: quote to prevent word splitting
			     onap-gerrit-review-print-lines -H -B1 -A1 "$file" $(comm -12 "$TMP2" "$TMP4" | sort -n) | sed 's/^/    /'
			     echo
			 fi
		     fi
		 fi

		 if egrep "[[:alnum:]]+[[:space:]]*Copyright" "$file" /dev/null > "$TMP"
		 then error text-before-copyright "Text found before 'Copyright' on these lines:"
		      sed 's/^/    /' "$TMP"
		 else success "No text found before 'Copyright'"
		 fi
		 
	    elif [ -n "$YEAR" ]
	    then "$ERROR" copyright-year-not-found-in-file "Copyright $YEAR not found in $file"
	    else "$ERROR" copyright-not-found-in-file "Copyright not found in $file"
	    fi
	done
    fi
}

# verify that all of the updated files with copyrights have the same updated copyright company
crossCheckCopyrights()
{
    PRINT_EXTRA_COPYRIGHT_INFO=false
    if $PRINT_EXTRA_COPYRIGHT_INFO
    then
	echo ">>>>>>>>>>>>>>>> all copyrights <<<<<<<<<<<<<<<<"
	sed 's/^/    /' "$COPYRIGHTLIST"
	echo ">>>>>>>>>>>>>>>> copyright files <<<<<<<<<<<<<<<<"
	sed 's/^/    /' "$COPYRIGHTFILES"
    fi
    
    local copyright_count
    copyright_count=$(sort -u "$COPYRIGHTFILES" | wc -l)
    : > "$TMP2"
    [ "$copyright_count" -eq 0 ] && return
    echo "$copyright_count files were found with copyright." >> "$TMP2"
    echo "These unique copyright texts were found:" >> "$TMP2"
    sed "s/^.*copyright.*$YEAR//i" < "$COPYRIGHTLIST" | sort -u > "$TMP"
    sed 's/^[[:space:]]*/    /' "$TMP" >> "$TMP2"
    local found_equal; found_equal=false
    while read -r copyright_text
    do
	local found_count
	echo grep -c -e "$copyright_text" "$COPYRIGHTLIST"
	found_count=$(grep -c -e "$copyright_text" "$COPYRIGHTLIST")
	echo "Found '$copyright_text' in $found_count files." >> "$TMP2"
	fgrep -e "$copyright_text" "$COPYRIGHTLIST" | sed 's/^/    /' >> "$TMP2"
	if [ "$found_count" -eq "$copyright_count" ]
	then
	    found_equal=true
	    success "All changed files with copyright were found to have '$copyright_text'"
	fi
    done < "$TMP"
    if "$found_equal"
    then : success messages were given above
    else
	error current-copyright-not-in-all-files "None of the copyright texts were found to exist in all files that have copyrights." &&
	    sed 's/^/    /' < "$TMP2"
    fi
    if $PRINT_EXTRA_COPYRIGHT_INFO
    then
	echo ">>>>>>>>>>>>>>>> copyright checks <<<<<<<<<<<<<<<<"
	sed 's/^/    /' < "$TMP2"
    fi
}

checkEOL()
{
    if [ $# -eq 0 ]
    then success No files to check for a NL ending
    elif
	# shellcheck disable=SC2086
	# SC2086: double quote to prevent globbing and word splitting
	onap-gerrit-review-verify-eol $SUBVERBOSITY -s "$@" > "$TMP" 2>&1
    then success "ALL files have a NL ending"
    else error no-nl-ending-on-files "Some files do not have a NL ending:" &&
	    sed 's/^/    /' "$TMP"
    fi
}

checkXML()
{
    if [ $# -eq 0 ]
    then success No XML files to check
    elif
	# shellcheck disable=SC2086
	# SC2086: double quote to prevent globbing and word splitting
	onap-gerrit-review-verify-xml $SUBVERBOSITY -s "$@" > "$TMP" 2>&1
    then success "ALL XML files verified"
    else error invalid-xml-found "XML files were found that did not have valid XML in them" &&
	    sed 's/^/    /' "$TMP"
    fi
}

checkTODO()
{
    if [ $# -eq 0 ]
    then success No files to check for TODO in
    elif fgrep -n TODO "$@" > "$TMP"
    then
	warning found-todo-in-file "Some files have TODO in them:" &&
	    sed 's/^/    /' "$TMP"
    else
	success "No files have TODO in them"
    fi
}

checkLeadingTabs()
{
    if [ $# -eq 0 ]
    then success "No $CHECKTYPE files to look in for tab indentations"
    elif egrep -l "^	[^[:space:]]" "$@" > "$TMP"
    then
	error tabbed-indentation "Some files have tab indentations in them:" &&
	    sed 's/^/    /' "$TMP"
    else
	success "No files have tab indentations in them"
    fi
}

checkPylint()
{
    if [ "$#" -eq 0 ]
    then success No py files for pylint
    elif ! verifypaths pylint
    then error no-pylint-in-path Cannot find pylint in your path
    else
	for file
	do
	    if PYLINTRC="$ONAP_GERRIT_REVIEW_PYLINTRC" pylint "$file" > "$TMP" 2>&1
	    then
		success "Pylint generated no errors for $file"
	    else
		error found-pylint-errors "Pylint generated errors for $file:" &&
		    sed 's/^/    /' "$TMP"
	    fi
	done
    fi
}

checkDockerfile()
{
    if [ "$#" -eq 0 ]
    then success "No Dockerfile's"
    else
	for file
	do
	    # check for USER root, make sure there's another USER statement
	    # after it for something other than root
	    if egrep "^USER[[:space:]]+root" "$file" > /dev/null
	    then
		if egrep "^USER" < "$file" | tail -n 1 | egrep "^USER[[:space:]]+root" > /dev/null
		then error dockerfile-user-root "The last USER statement in $file is for root"
		else success "The last USER statement in $file is not for root"
		fi
	    fi
	    # use hadolint ? dockerlinter
	    if [ -n "$ONAP_GERRIT_REVIEW_DOCKERLINTER" ]
	    then
		if ! verifypaths dockerlinter
		then error no-pylint-in-path Cannot find dockerlinter in your path
		else
		    dockerlinter -s sh -f "$file" > "$TMP" 2>&1
		    if [ -s "$TMP" ]
		    then
			error found-dockerlinter-errors "dockerlinter generated errors for $file:" &&
			    sed 's/^/    /' "$TMP"
		    else success "dockerlinter generated no errors for $file"
		    fi
		fi
	    fi
	done
    fi
}

checkPydocstyle()
{
    if [ "$#" -eq 0 ]
    then success No py files for pylint
    elif ! verifypaths pydocstyle
    then error no-pydocstyle-in-path Cannot find pydocstyle in your path
    else
	for file
	do
	    if pydocstyle --convention="$ONAP_GERRIT_REVIEW_PYDOCSTYLE" "$file" > "$TMP" 2>&1
	    then
		success "Pydocstyle generated no errors for $file"
	    else
		error found-pydocstyle-errors "Pydocstyle generated errors for $file:" &&
		    sed 's/^/    /' "$TMP"
	    fi
	done
    fi
}

checkBlack()
{
    if [ "$#" -eq 0 ]
    then success No py files for black
    else
	if python3 -m black --line-length 120 "$@" > "$TMP" 2>&1
	then
	    success "Black -l 120 generated no errors"
	    "$SILENT" || cat "$TMP"
	else
	    error found-black-errors "Black -l 120 generated errors:" &&
		sed 's/^/    /' "$TMP"
	fi
    fi
}

checkJslinter()
{
    if [ "$#" -eq 0 ]
    then success 'No js files for jshint/jslint'
    else
	for jslinter in $ONAP_GERRIT_REVIEW_JSLINTERS
	do
	    if case "$jslinter" in
		   jslint )
		       verifypaths node
		       node jslint.mjs "$@" > "$TMP" 2>&1
		       ;;
		   jshint )
		       verifypaths jshint
		       echo '{"esversion":6}' > "$JSHINTFILE"
		       jshint --config "$JSHINTFILE" "$@" > "$TMP" 2>&1
		       ;;
		   * )
		       # shellcheck disable=SC2016
		       # SC2016: expressions don't expand in single quotes
		       die '$ONAP_GERRIT_REVIEW_JSLINTERS must be set to either jshint' ;; # or jslint' ;;
	       esac
	    then
		success "jslinter generated no errors"
		"$SILENT" || cat "$TMP"
	    else
		error "found-$jslinter-errors" "$jslinter generated errors:" &&
		    sed 's/^/    /' "$TMP"
	    fi
	done
    fi
}

needsVersionProperties()
{
    local dir; dir="$1"

    if check_disabled_message version-properties-missing
    then
	return 1
    else
	# Dockerfile or docker.image.name requires version.properties
	if [ -n "$(find "$dir" -type f -name Dockerfile -print)" ]
	then : found a Dockerfile; return 0
	elif fgrep "<docker.image.name>" "$dir/pom.xml" > /dev/null
	then : found docker.image.name in pom.xml; return 0
	fi
	: neither Dockerfile nor docker.image.name found
	return 1
    fi
}

multi_checks()
{
    local FILESTOCHECK; FILESTOCHECK="$1"

    sort -o "$FILESTOCHECK" "$FILESTOCHECK"

    # shellcheck disable=SC2046
    # SC2046: quote to prevent word splitting
    checkXML $(grep "[.]xml$" "$FILESTOCHECK")

    # shellcheck disable=SC2046
    CHECKTYPE=yaml checkCopyright -w $(egrep "[.](ya?ml|yaml-template)$" "$FILESTOCHECK" | grep -v '^releases/')

    # shellcheck disable=SC2046
    for ext in $COPYRIGHT_EXTENSIONS
    do
	# shellcheck disable=SC2046
	CHECKTYPE=$ext checkCopyright $(grep "[.]$ext$" "$FILESTOCHECK")
    done

    # TODO check the REST of the new files for any that have the word Copyright in them
    sort -o "$COPYRIGHTCHECKED" "$COPYRIGHTCHECKED"
    comm -23 "$FILESTOCHECK" "$COPYRIGHTCHECKED" > "$TMP"
    # shellcheck disable=SC2046
    grep -l "Copyright" $(< "$TMP") > "$TMP2"
    if [ -s "$TMP2" ]
    then
	# shellcheck disable=SC2046
	CHECKTYPE=other checkCopyright $(< "$TMP2")
    else success No additional files found with a Copyright notice
    fi

    "$DOCROSSCHECK" && crossCheckCopyrights
    # shellcheck disable=SC2046
    checkEOL $(< "$FILESTOCHECK")
    # shellcheck disable=SC2046
    checkTODO $(< "$FILESTOCHECK")
    for ext in $NOTAB_EXTENSIONS
    do
	# shellcheck disable=SC2046
	CHECKTYPE=$ext checkLeadingTabs $(grep "[.]ext$" "$FILESTOCHECK")
    done

    # shellcheck disable=SC2046
    CHECKTYPE=Dockerfile checkDockerfile $(grep "Dockerfile$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_PYLINTRC" ] && checkPylint $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_PYDOCSTYLE" ] && checkPydocstyle $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_BLACK" ] && checkBlack $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_JSLINTERS" ] && checkJslinter $(grep "[.]js$" "$FILESTOCHECK")
}

SILENT=false
NOTSILENT=true
LIMIT=false
SUBVERBOSITY=
while getopts lsVxX opt
do
    case "$opt" in
	l ) LIMIT=true ;;
	s ) SILENT=true NOTSILENT=false ;;
	V ) echo "Version: $GITVERSIONSTAMP"; exit 0 ;;
	x ) set -x ;;
	X ) SUBVERBOSITY="$SUBVERBOSITY -v" ;;
	* ) usage ;;
    esac
done
shift $(( OPTIND - 1 ))

if [ $# -eq 0 ]
then usage
fi

STARTDIR=$(pwd)
exitcode=0

for TOPDIR
do
    successcount=0
    warningcount=0
    errorcount=0
    ignoredcount=0
    : > "$COPYRIGHTLIST"
    : > "$COPYRIGHTFILES"

    case "$TOPDIR" in
	/* ) ;;
	* ) TOPDIR="$STARTDIR/$TOPDIR" ;;
    esac
    POMDIR="$TOPDIR"
    # TOPPOMDIR="$TOPDIR"

    "$SILENT" || echo "Using $TOPDIR"
    cd "$TOPDIR" || die "Cannot cd $TOPDIR"
    verifypaths # make sure things are STILL accessible after the cd

    if [ -f .temp.git-log ]
    then
	"$SILENT" || echo New files:
	find . -type f -newer .temp.git-log | fgrep -v ./.git/ | egrep -v '^[.]/[.]git$' | sed 's!^[.]/!!' | sort | egrep -v '^[.]temp[.]git-log2?$'  > "$NEWFILES"
	dirnameloop < "$NEWFILES" | sort -u > "$NEWDIRS"

	if "$NOTSILENT"
	then
	    echo "Files with mods:"
	    sed 's/^/    /' "$NEWFILES"
	    echo
	    echo "Directories with mods:"
	    sed 's/^/    /' "$NEWDIRS"
	    echo
	fi
    fi
    "$SILENT" || echo Using "$TOPDIR"

    find * -type f -print | fgrep -v /.git/ > "$FLIST"
    egrep -i '(^|/)pom[.]xml$' "$FLIST" > "$POMFILES"
    dirnameloop < "$POMFILES" | sort -u > "$ALLPOMDIRS"
    grep -v '^[.]$' < "$ALLPOMDIRS" > "$POMDIRS"

    if [ -f LICENSE.txt ]
    then success Found a top-level LICENSE.txt file
    else error no-top-level-license-txt-file Did not find a top-level LICENSE.txt file
    fi
    find . -name 'LICENSE*' > "$TMP4"
    while read -r license_file
    do
	case "$license_file" in
	    LICENSE.txt | */LICENSE.txt )
		success "License file $license_file is named LICENSE.txt" ;;
	    * ) error misnamed-license-txt "The file $license_file should be named LICENSE.txt" ;;
	esac
	if fgrep "Apache License, Version 2.0" "$license_file" > /dev/null
	then success "Found 'Apache License, Version 2.0' reference in $license_file"
	else error no-apache-license "Did not find 'Apache License, Version 2.0' reference in $license_file"
	fi
    done < "$TMP4"

    for i in 'changelog[.]md' 'version[.]properties'
    do
	egrep -i "(^|/)$i$" "$FLIST"
    done |
	dirnameloop | sort -u > "$ALLWDIRS"
    grep -v '^[.]$' < "$ALLWDIRS" > "$WDIRS"

    if "$NOTSILENT"
    then
	echo Directories with pom.xml:
	sort -u "$ALLPOMDIRS" | sed 's/^/    /'
	echo Directories with any of changelog.md or version.properties:
	sort -u "$ALLWDIRS" | sed 's/^/    /'
    fi
    if [ ! -s "$POMDIRS" ]
    then
	cp "$ALLPOMDIRS" "$POMDIRS"
	cp "$ALLWDIRS" "$WDIRS"
	"$SILENT" || echo "Including top level directory"
    else
	"$SILENT" || echo "Skipping top level directory"
    fi

    for POMDIR in $( < "$POMDIRS" )
    do
	"$SILENT" || echo "Working on $POMDIR"
	if "$LIMIT" && [ -f .temp.git-log ]
	then
	    if grep -e "$POMDIR" "$NEWDIRS" > /dev/null
	    then "$SILENT" || echo "Found $POMDIR in directories with mods"
	    else continue
	    fi
	fi

	"$SILENT" || echo
	: echo ls -l "$POMDIR/pom.xml" "$POMDIR/version.properties" "$POMDIR/setup.py"
	: ls -l "$POMDIR/pom.xml" "$POMDIR/version.properties" "$POMDIR/setup.py"
	artifactId=$(onap-gerrit-review-extract-xml -i "$POMDIR/pom.xml" "${POMNS}artifactId")
	versionSN=$(onap-gerrit-review-extract-xml -i "$POMDIR/pom.xml" "${POMNS}version")
	versionPVSN=$(onap-gerrit-review-extract-xml -i "$POMDIR/pom.xml" "${POMNS}parent/${POMNS}version")
	versionPV=${versionPVSN//-SNAPSHOT/}
	version=${versionSN//-SNAPSHOT/}
	# echo "POMDIR=$POMDIR versionSN=$versionSN versionPVSN=$versionPVSN"
	if [ -z "$version" ] || [ "$version" = None ]
	then
	    if [ "$POMDIR" != . ]
	    then
		version="$versionPV"
		warning using-parent-version-in-pom "No version info found in $POMDIR/pom.xml. Using parent version instead"
	    fi
	fi
	"$SILENT" || echo "================ $POMDIR ==== $artifactId ==== $versionSN -- $version ================"

	if [ -z "$version" ] || [ "$version" = None ]
	then
	    error no-version-in-pom No version info found in "$POMDIR/pom.xml"
	elif [ "$artifactId" = None ]
	then
	    error no-artifact-in-pom-id No artifactId info found in "$POMDIR/pom.xml"
	else
	    if [ -f "./releases/$artifactId-$version-container.yaml" ]
	    then error pom-version-already-released "$POMDIR/pom.xml version $version has already been released and needs to change"
	    else success "$POMDIR/pom.xml version $version has not been released"
	    fi

	    cl=$( find "$POMDIR" -type f -print | grep -i changelog.md )
	    if [ -n "$cl" ]
	    then
		"$SILENT" || echo "Looking at $cl"
		: check that version is found within
		# shellcheck disable=SC2086
		clv=$(grep "^##[[:space:]]*[[]$version[]]" $cl)
		if [ -n "$clv" ]
		then success "Found $version in $cl"
		else error version-not-found-in-changelog "Did not find version $version in $cl"
		fi
		# shellcheck disable=SC2086
		if grep -n '[[:digit:]][[:digit:]][-/][[:digit:]][[:digit:]][-/][[:digit:]][[:digit:]][[:digit:]][[:digit:]]' $cl > "$TMP"
		then error changelog-ambiguous-dates "Found ambiguous dates in $cl:" &&
			sed 's/^/    /' "$TMP"
		else success "Did not find ambiguous dates in $cl"
		fi

		: are the numbers increasing or decreasing?
		for clf in $cl
		do
		    # echo ">>>> looking at $clf"
		    egrep '^## [[][[:digit:]]+[.][[:digit:]]+([.][[:digit:]])?[]]' "$clf" |
			awk '{print $2}' |
			sed 's/[][]//g' |
			awk -F. '{print $1 * 1000000 + $2 * 1000 + $3}'  > "$TMP"
		    # cat "$TMP"
		    # echo ".... sorting"
		    sort -rn "$TMP" > "$TMP2"
		    # cat "$TMP2"
		    if cmp "$TMP" "$TMP2" > /dev/null
		    then success "The version numbers in $clf are in the correct order"
		    else error changelog-versions-misordered "The version numbers in $clf are not in the correct order" &&
			    awk '
				BEGIN { prev="" }
				prev != "" {
				    if ($1 > prev) {
					m1 = int($1 / 1000000)
					m2 = int($1 / 1000) % 1000
					m3 = $1 % 1000
					p1 = int(prev / 1000000)
					p2 = int(prev / 1000) % 1000
					p3 = prev % 1000
					print m1 "." m2 "." m3 " should be before " p1 "." p2 "." p3
				    }
				}
				{ prev = $1 }
			    ' "$TMP"
		    fi
		done
	    else
		error changelog-missing "No $POMDIR/ChangeLog.md found"
	    fi

	    if [ -f "$POMDIR/version.properties" ]
	    then
		"$SILENT" || echo "Looking at $POMDIR/version.properties"
		vp=$(version_properties_version "$POMDIR/version.properties")
		"$SILENT" || echo "	version=$vp"
		if [ "$version" = "$vp" ]
		then success "$POMDIR/pom.xml versions match in $POMDIR/version.properties: $vp"
		else error version-mismatch-pom-version-properties "$POMDIR/pom.xml version $version does not match $POMDIR/version.properties: $vp"
		fi
	    elif needsVersionProperties "$POMDIR"
	    then warning version-properties-missing "No $POMDIR/version.properties found for $POMDIR/pom.xml"
	    else success "No $POMDIR/version.properties file needed"
	    fi

	    FOUNDCODE=false
	    if hasPythonCode "$POMDIR"
	    then
		FOUNDCODE=true
		"$SILENT" || echo "Found python code in $POMDIR"
		if [ -f "$POMDIR/setup.py" ]
		then
		    "$SILENT" || echo "Looking at $POMDIR/setup.py"
		    sp=$(setup_version "$POMDIR/setup.py")
		    "$SILENT" || echo "	version=$sp"
		    if [ "$version" = "$sp" ]
		    then success "$POMDIR/pom.xml versions match in $POMDIR/setup.py: version $sp"
		    else error version-mismatch-pom-setup-py "$POMDIR/pom.xml version $version does not match $POMDIR/setup.py version $sp"
		    fi
		else
		    error missing-setup-py "No $POMDIR/setup.py"
		fi
	    fi

	    if hasJavascriptCode "$POMDIR"
	    then
		FOUNDCODE=true
		"$SILENT" || echo "Found javascript code in $POMDIR"
		if [ -f "$POMDIR/package.json" ]
		then
		    "$SILENT" || echo "Looking at $POMDIR/package.json"
		    pv=$(package_version "$POMDIR/package.json")
		    "$SILENT" || echo "	version=$pv"
		    if [ "$version" = "$pv" ]
		    then success "$POMDIR/pom.xml versions match in $POMDIR/package.json: version $pv"
		    else error version-mismatch-pom-package-json "$POMDIR/pom.xml version $version does not match $POMDIR/package.json version $pv"
		    fi
		else
		    error missing-package-json "No $POMDIR/package.json"
		fi
	    fi

	    if hasTypeCode java "$POMDIR" || hasTypeCode jsp "$POMDIR" || hasTypeCode scala "$POMDIR" || hasTypeCode kt "$POMDIR"
	    then : "TODO - do some checks on the java code?"
		FOUNDCODE=true
		"$SILENT" || echo "Found java code in $POMDIR"

		# jsp
		# scala
		# kt


		find "$POMDIR" -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep -l "import.*[*]" {} + | sed 's!^[.]/!!' | sort > "$JAVAFILES"
		if "$LIMIT"
		then
		    : echo javafiles=
		    : cat "$JAVAFILES"
		    : echo newfiles=
		    : sed 's/^/    /' "$NEWFILES"
		    comm -12 "$JAVAFILES" "$NEWFILES" > "$TMP"
		    : echo common files:
		    : sed 's/^/    /' "$TMP"
		    if [ -s "$TMP" ]
		    then error found-import-star "'import ... *' found in updated java files:"
			 sed 's/^/    /' "$TMP"
			 # shellcheck disable=SC2046
			 # SC2046: quote to prevent word splitting
			 find $(<"$TMP") -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep "import.*[*]" {} + | sed 's/^/    /'
		    else success "No 'import ... *' found in updated java files"
		    fi

		else
		    if [ -s "$JAVAFILES" ]
		    then error found-import-star "'import ... *' found in:"
			 sed 's/^/    /' "$JAVAFILES"
			 find "$POMDIR" -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep "import.*[*]" {} + | sed 's/^/    /'
		    else success "No 'import ... *' found in java files"
		    fi
		fi
	    fi

	    if hasTypeCode json "$POMDIR"
	    then success Has JSON code
		 FOUNDCODE=true
		 JSONFILES="$JAVAFILES"
		 if "$LIMIT"
		 then
		     grep -i '[.]json$' "$NEWFILES" > "$JSONFILES"
		 else
		     find "$POMDIR" -type f -name "*.json" > "$JSONFILES"
		 fi
		 if [ -s "$JSONFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-json $SUBVERBOSITY -s $(< "$JSONFILES") > "$TMP" 2>&1
		     then success "JSON files all have valid JSON in them"
		     else error invalid-json-found "JSON files were found that did not have valid JSON in them"
			  sed 's/^/    /' "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if hasTypeCode yaml "$POMDIR" || hasTypeCode yml "$POMDIR"
	    then success Has YAML code
		 FOUNDCODE=true
		 if "$LIMIT"
		 then
		     egrep -i '[.]ya?ml$' "$NEWFILES" > "$YAMLFILES"
		 else
		     find "$POMDIR" -type f '(' -name "*.yaml" -o -name '*.yml' ')' > "$YAMLFILES"
		 fi
		 if [ -s "$YAMLFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-yaml $SUBVERBOSITY -s $(< "$YAMLFILES") > "$TMP" 2>&1
		     then success "YAML files all have valid YAML in them"
		     else error invalid-yaml-found "YAML files were found that did not have valid YAML in them"
			  sed 's/^/    /' "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if hasTypeCode yaml-template "$POMDIR"
	    then success Has YAML templates
		 FOUNDCODE=true
		 if "$LIMIT"
		 then
		     egrep -i '[.]yaml-template$' "$NEWFILES" > "$YAMLFILES"
		 else
		     find "$POMDIR" -type f -name "*.yaml-template" > "$YAMLFILES"
		 fi
		 if [ -s "$YAMLFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-yaml --template $SUBVERBOSITY -s $(< "$YAMLFILES") > "$TMP" 2>&1
		     then success "YAML templates all have valid YAML in them"
		     else error invalid-yaml-found "YAML templates were found that did not have valid YAML in them"
			  sed 's/^/    /' "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if "$FOUNDCODE"
	    then success "Was able to determine the type of code in $POMDIR"
	    else "$SILENT" || error indeterminate-code "Cannot determine the type of code in $POMDIR"
	    fi
	fi
    done # for POMDIR in $( < "$POMDIRS" )
    POMDIR=$TOPDIR

    if "$LIMIT" # [ -f .temp.git-log ]
    then
	if fgrep -i changelog.md "$NEWFILES" > "$CLFILES"
	then
	    if "$NOTSILENT"
	    then
		echo "ChangeLog.md files:"
		sed 's/^/    /' "$CLFILES"
	    fi
	    success "Found a ChangeLog.md file in the updated files"
	    if [ ! -f .temp.git-log2 ]
	    then success Working without a .temp.git-log2 file
	    else
		ISSUEID=$(
		    diff .temp.git-log .temp.git-log2 |
			awk '$2 == "Issue-ID:" { print $3 }' |
			sort -u
		       )

		if [ -n "$ISSUEID" ]
		then
		    # head -n 50 $(<"$CLFILES") /dev/null
		    # shellcheck disable=SC2086
		    success "Found Issue-ID: in the git log commit:" $ISSUEID
		    for issueid in $ISSUEID
		    do
			# shellcheck disable=SC2046
			# SC2046: quote to prevent word splitting
			if grep -e "$issueid" $(<"$CLFILES") > /dev/null
			then success "Found Issue-ID: $issueid in the changed ChangeLog.md files"
			else
			    echo "===="
			    cat "$NEWFILES"
			    if [ "$(wc -l < "$NEWFILES")" -eq 1 ]
			    then success "No Issue-ID: required for ChangeLog.md file"
			    else error changelog-no-issue-id "Did not find Issue-ID: $issueid in the changed ChangeLog.md files"
			    fi
			fi
		    done
		else error gitlog-commit-no-issue-id "Did not find an Issue-ID: in the git log commit"
		fi
	    fi
	elif fgrep -i releases/ "$NEWFILES" > "$RELEASEFILES"
	then
	    # TODO:
	    # releases name is ARTIFACTID-VERSION-container.yaml
	    # OR VERSION-ARTIFACTID-container.yaml
	    # OR just VERSION-container.yaml
	    # There are also different types of files that do NOT have have -container in the name.
	    #
	    # Find the pom file with the same artifactId
	    # Make sure that:
	    #    pom.xml, changelog.md and version-properties all have the same VERSION

	    # We COULD do a poke in the Jenkins build tree to see if that container actually exists.

	    # Make sure that the data inside of the releases file is consistent.
	    # shellcheck disable=SC2046,SC2086
	    # SC2046: quote to prevent word splitting
	    # SC2086: double quote to prevent globbing and word splitting
	    if onap-gerrit-review-verify-releasefile $SUBVERBOSITY -n -p "$POMFILES" -s $(< "$RELEASEFILES") > "$TMP" 2>&1
	    then
		success "Release files verified"
	    else
		error release-file-issue "Release files have problems"
		sed 's/^/    /' "$TMP"
	    fi

	else error changelog-or-release-file-missing "Did not find either a ChangeLog.md or a releases file in the updated files"
	fi

	FILESTOCHECK=$NEWFILES
	DOCROSSCHECK=true multi_checks "$NEWFILES"

    else # not [ -f .temp.git-log ]
	find * -type f | sort > "$ALLFILES"

	YEAR='' DOCROSSCHECK=false multi_checks "$ALLFILES"

	if [ -d releases ]
	then
	    # Make sure that the data inside of the releases file is consistent.
	    # shellcheck disable=SC2086
	    # SC2086: double quote to prevent globbing and word splitting
	    if onap-gerrit-review-verify-releasefile $SUBVERBOSITY -s releases/*.yaml > "$TMP" 2>&1
	    then
		success "Release files verified"
	    else
		error release-file-issue "Release files have problems"
		sed 's/^/    /' "$TMP"
	    fi
	fi
    fi # if [ -f .temp.git-log ]
    echo "Using $TOPDIR"

    echo "Total: $warningcount Warnings, $errorcount Errors, $ignoredcount Ignored, $successcount Successful tests run on $TOPDIR"
    [ $# -gt 1 ] && echo
    [ "$errorcount" -gt 0 ] && exitcode=1
    
done

exit "$exitcode"
