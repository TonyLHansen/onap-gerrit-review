#!/bin/bash

# shellcheck disable=SC2035,SC2196,SC2197
# SC2035: use ./*glob* so names with dashes won't become options
# SC2196: allow use of egrep
# SC2197: allow use of fgrep

GITVERSIONSTAMP="2022-09-13-17-04"

usage()
{
    echo "Usage: $0 [-E] [-l] [-s] [-q] [-t] [-x] [-X] [-m message] directory"
    echo "Usage: $0 -V"
    echo " -s Only show errors"
    echo " -l Limit errors to new directories/files modified by gerrit drop. Requires that .temp.git-log (and optionally .temp.git-log2) exists."
    echo
    echo " NOTE: The timestamp of .temp.git-log is used to determine which files were changed in the pull request."
    echo " -m message - do not report on this message. May be specified multiple times."
    echo " -E Do not exit non-zero on failures (also can be disabled using '-m exit-code-on-errors')"
    echo " -t When showing leading tabs, show all of them."
    echo " -q Do not print a message about how to suppress error/warning messages when there are errors/warnings"
    echo " -Q Force the message to be printed about how to suppress error/warning messages"
    echo " -x Turn on -x mode"
    echo " -X Turn on verbosity mode for sub-components. May be specified multiple times for additional verbosity."
    echo " -V Show the version stamp and exit"
    echo
    echo "Environment variables:"
    echo "    ONAP_GERRIT_REVIEW_PYLINTRC If set, run 'pylint' with PYLINTRC set to this value."
    echo "    ONAP_GERRIT_REVIEW_PYDOCSTYLE If set, run 'pydocstyle'. Must be one of pep257, numpy or google."
    echo "    ONAP_GERRIT_REVIEW_BLACK If set, run 'black --line-length 120' on the python files."
    echo "    ONAP_GERRIT_REVIEW_JSLINTERS If set to 'jshint', run it on the javascript files."
    echo "    ONAP_GERRIT_REVIEW_DOCKERLINTER If set, run 'dockerlinter' on Dockerfile files."
    exit 1
}

die()
{
    echo "$@" 1>&2
    exit 99
}

dirnameloop()
{
    while read -r path
    do
	dirname "$path"
    done
}

verifypaths()
{
    [ $# -eq 0 ] && set -- \
			onap-gerrit-review-extract-xml \
			onap-gerrit-review-verify-eol \
			onap-gerrit-review-verify-json \
			onap-gerrit-review-verify-releasefile \
			onap-gerrit-review-verify-yaml \
			onap-gerrit-review-verify-xml
    for i
    do
	type "$i" >/dev/null 2>&1 ||
	    die "Cannot find $i in your PATH." \
		"Make sure that the directory where the tools are installed is in your PATH."
    done
}

verifypaths

TMPFILEDIR=$(mktemp -d /tmp/ogr2.XXXXXXXXXX)
trap 'rm -rf "$TMPFILEDIR"' 0 1 2 3 15
RMMESSAGES="$TMPFILEDIR"/rmmessages
: > "$RMMESSAGES"
NEWFILES="$TMPFILEDIR"/newfiles
ALLFILES="$TMPFILEDIR"/allfiles
FLIST="$TMPFILEDIR"/flist
WDIRS="$TMPFILEDIR"/wdirs
POMDIRS="$TMPFILEDIR"/pomdirs
NEWDIRS="$TMPFILEDIR"/newdirs
ALLWDIRS="$TMPFILEDIR"/allwdirs
ALLPOMDIRS="$TMPFILEDIR"/allpomdirs
CLFILES="$TMPFILEDIR"/clfiles
POMFILES="$TMPFILEDIR"/pomfiles
JAVAFILES="$TMPFILEDIR"/javafiles
YAMLFILES="$TMPFILEDIR"/yamlfiles
COPYRIGHTFILES="$TMPFILEDIR"/copyrightfiles
COPYRIGHTLIST="$TMPFILEDIR"/copyrightlist
COPYRIGHTCHECKED="$TMPFILEDIR"/copyrightchecked
RELEASEFILES="$TMPFILEDIR"/releasefiles
JSHINTFILE="$TMPFILEDIR"/JSHINTFILE
TMP="$TMPFILEDIR"/tmp
TMP2="$TMPFILEDIR"/tmp2
TMP3="$TMPFILEDIR"/tmp3
TMP4="$TMPFILEDIR"/tmp4
TMP5="$TMPFILEDIR"/tmp5
TMP6="$TMPFILEDIR"/tmp6


YEAR=$(date +%Y)
POMNS='{http://maven.apache.org/POM/4.0.0}'

# checkNoEOL should skip over non-text files (.png, .jpg, ...)
export ONAP_GERRIT_REVIEW_SKIP_EXTENSIONS=".crt .der .egg .eot .exe .gz .h5 .ico .jar .jks .jpg .png .pyc .so .tgz .ttf .whl .woff .woff2 .xlsx .zip"
# These file types MUST have copyrights
COPYRIGHT_EXTENSIONS="cpp c cc h java js py xml clj css erl ftl html jsp kt rst scala sh sql tpl ts"
# These file types MUST not have leading tabs
NOTAB_EXTENSIONS="cpp c cc h clj css erl ftl java jsp kt proto scala sh sql tpl ts yaml"

smso=$(tput smso 2>/dev/null)
rmso=$(tput rmso 2>/dev/null)
[ -z "$smso" ] && [ -z "$rmso" ] && smso='<<< ' rmso=' >>>'
export smso rmso

dos2unix()
{
    cat "$@" | tr -d '\r'
}

version_properties_version()
{
    local file="$1"
    local major; major=$(dos2unix "$file" | grep "^major=" | sed 's/^.*=//')
    local minor; minor=$(dos2unix "$file" | grep "^minor=" | sed 's/^.*=//')
    local patch; patch=$(dos2unix "$file" | grep "^patch=" | sed 's/^.*=//')
    echo "$major.$minor.$patch"
}

# prepend each line with four spaces and undo the file renaming that may have occured
modify_input()
{
    sed 's/^/    /' | onap-gerrit-review-rename-files --input --undo
}

setup_version()
{
    local setup_py_file="$1"
    # shellcheck disable=SC2155
    # SC2155: Declare and assign separately to avoid masking return values
    local ver=$(grep "^[[:space:]]*version[[:space:]]*=" "$setup_py_file" |
		    sed -e 's/^[^=]*=[[:space:]]*//' \
			-e 's/"//' -e "s/'//" \
			-e 's/[",].*//' \
			-e "s/[',].*//"
	  )

    case "$ver" in
	__version__ )
	    # shellcheck disable=SC2155
	    # SC2155: Declare and assign separately to avoid masking return values
	    local dirname=$(dirname "$setup_py_file")
	    # shellcheck disable=SC2155
	    local verfile="$dirname/"$(
		grep "open(os.path.join" "$setup_py_file" |
		    sed -e "s/\"/'/g" -e 's/.*open(os.path.join(setup_dir,//' \
			-e 's/)).*//' -e "s/[',]//g" -e 's/^[[:space:]]*//' \
			-e 's![[:space:]][[:space:]]*!/!g'
		  )
	    ver=$(grep "^[[:space:]]*__version__[[:space:]]*=" "$verfile" |
		      sed -e 's/^[^=]*=[[:space:]]*"//' -e "s/^[^=]*=[[:space:]]*'//" \
			  -e 's/".*//' -e "s/'.*//"
	       )
	    ;;

	[0-9]*.[0-9]*.[0-9]* )
	    ;;

	* )
	    error bad-setup-py-version-string "Cannot determine the version from $setup_py_file. Got $ver"
	    ;;
    esac
    echo "$ver"
}

package_version()
{
    local file="$1"
    grep '^[[:space:]]*"version"[[:space:]]*:' "$file" |
	sed -e 's/^[^:]*:[[:space:]]*"//' -e "s/^[^:]*:[[:space:]]*'//" -e 's/".*//' -e "s/'.*//"
}

check_disabled_message()
{
    local code; code="$1"
    # Loop through $POMDIR, $POMDIR/.., $POMDIR/../.. up to
    # the root, looking for pom.xml files. For each, extract
    # the properties/onap-gerrit-review block and check it
    # for "-$code".
    local nmdir
    local pomdir; pomdir=$POMDIR
    while :
    do
	if [ "$pomdir" = "$TOPDIR" ] || [ "$pomdir" = . ]
	then nmdir=topdir
	else nmdir="${pomdir//\//--}"
	fi
	local tmpfile; tmpfile="$TMPFILEDIR/$nmdir--pom.xml"
	if [ ! -f "$tmpfile" ]
	then
	    : "Creating file $tmpfile"
	    if [ -f "$pomdir/pom.xml" ]
	    then onap-gerrit-review-extract-xml -i "$pomdir/pom.xml" "${POMNS}properties/${POMNS}onap-gerrit-review" | tr ', \t' '\n' | grep -v '^$' > "$tmpfile"
	    else : > "$tmpfile"
	    fi
	fi
	if grep "^-$code$" "$tmpfile" > /dev/null
	then return 0
	fi
	if [ "$pomdir" = "$TOPDIR" ] || [ "$pomdir" = . ]
	then break
	fi
	pomdir=$(dirname "$pomdir")
    done

    if grep "^-$code$" "$RMMESSAGES" > /dev/null
    then return 0
    fi

    if [ -f .temp.git-log ] && [ -f .temp.git-log2 ]
    then
	local tmpfile; tmpfile="$TMPFILEDIR/rmmessages--temp.git-log"
	if [ ! -f "$tmpfile" ]
	then
	    diff .temp.git-log .temp.git-log2 |
		awk '
		    BEGIN { commitcount = 0; foundissueid = 0; }
		    /^>* *commit/ { commitcount++; if (commitcount > 1 && foundissueid) exit }
		    $1 == "Issue-ID:" { foundissueid = 1; }
		    { print }
	        ' |
		grep "onap-gerrit-review:" |
		sed 's/^.*onap-gerrit-review://' |
		tr ', \t' '\n' |
		grep -v '^$' > "$tmpfile"
	fi
	if grep "^-$code$" "$tmpfile" > /dev/null
	then return 0
	fi
    fi

    return 1
}

fileIncluded()
{
    fgrep "$1" < "$NEWFILES" > /dev/null
}

laststatus=
error()
{
    code="$1"
    shift
    exec 1>&2
    if check_disabled_message "$code"
    then
	"$SILENT" || echo "Suppressing $code $*"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    elif [ -f "$HOME"/.onap-gerrit-review.rc ] &&
	     grep "^-$code" "$HOME"/.onap-gerrit-review.rc >/dev/null
    then
	: "ignoring $code"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    else
	(( errorcount = errorcount + 1 ))
	[ "$laststatus" = error ] || "$SILENT" || echo
	laststatus=error
	echo "${smso}ERROR: ($code) $*${rmso}"
	return 0
    fi
}

warning()
{
    code=$1
    shift
    exec 1>&2
    if check_disabled_message "$code"
    then
	"$SILENT" || echo "Suppressing $code $*"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    elif [ -f "$HOME"/.onap-gerrit-review.rc ] &&
	     grep "$code" "$HOME"/.onap-gerrit-review.rc >/dev/null
    then
	: "ignoring $code"
	(( ignoredcount = ignoredcount + 1 ))
	return 1
    else
	(( warningcount = warningcount + 1 ))
	[ "$laststatus" = warning ] || "$SILENT" || echo
	laststatus=warning
	echo "${smso}WARNING: ($code) $*${rmso}"
	return 0
    fi
}

success()
{
    (( successcount = successcount + 1 ))
    exec 1>&2
    [ "$laststatus" = success ] || "$SILENT" || echo
    laststatus=success
    "$SILENT" || echo "SUCCESS: $*"
}

hasTypeCode()
{
    [ -n "$(find "$2" -type f -name "*.$1" -print)" ]
}

hasPythonCode()
{
    # echo "hasPythonCode $1"
    # shellcheck disable=SC2046
    ONAP_GERRIT_REVIEW_SKIP_DIRS="./.git/ .git ./doc ./csit doc csit" \
				onap-gerrit-review-find-file-type -q -s py -! python $(find "$1" -type f)
}

hasShellCode()
{
    # shellcheck disable=SC2046
    ONAP_GERRIT_REVIEW_SKIP_DIRS="./.git/ .git" \
				onap-gerrit-review-find-file-type -q -s sh -! sh $(find "$1" -type f)
}

hasJavascriptCode()
{
    # shellcheck disable=SC2046
    ONAP_GERRIT_REVIEW_SKIP_DIRS="./.git .git ./doc ./csit doc csit" \
				onap-gerrit-review-find-file-type -q -s js $(find "$1" -type f)
}

checkCopyright()
{
    if [ "$1" = -w ]
    then ERROR=warning; shift
    else ERROR=error
    fi

    "$SILENT" || echo "Checking for Copyright in $CHECKTYPE files"

    if [ $# -eq 0 ]
    then success "No $CHECKTYPE files to look in for copyrights"
    else
	for file
	do
	    echo "$file" >> "$COPYRIGHTCHECKED"

	    if grep "Copyright[[:space:]]*[(][Cc][)].*$YEAR" "$file" /dev/null >> "$COPYRIGHTLIST" ||
		    grep "Copyright.*$YEAR" "$file" /dev/null >> "$COPYRIGHTLIST"
	    then success "Copyright $YEAR found in $file"
		 grep -l "Copyright .*$YEAR" "$file" /dev/null >> "$COPYRIGHTFILES"

		 local found_license_start; found_license_start=false
		 local error_license_start; error_license_start=
		 if grep "LICENSE_START" "$file" > /dev/null
		 then success "LICENSE_START found in $file"
		      found_license_start=true
		      : found license_start
		 else error_license_start=warning
		      : no license_start
		 fi

		 local error_license_end; error_license_end=
		 if grep -n "LICENSE_END" "$file" > "$TMP"
		 then success "LICENSE_END found in $file"
		      : found license_end
		      if ! "$found_license_start"
		      then error_license_start=error
		      fi
		 else
		     : no license_enc
		     if "$found_license_start"
		     then error_license_end=error
		     else error_license_end=warning
		     fi
		 fi
		 : error_license_start=$error_license_start
		 case "$error_license_start" in
		     warning )
			 warning license-start-not-found-in-file "LICENSE_START not found in $file" ;;
		     error )
			 error license-start-not-found-with-license-end "LICENSE_START not found in $file with LICENSE_END" ;;
		 esac

		 : error_license_end=$error_license_end
		 case "$error_license_end" in
		     warning )
			 warning license-end-not-found-in-file "LICENSE_END not found in $file" ;;
		     error )
			 error license-end-not-found-with-license-start "LICENSE_END not found in $file with LICENSE_START" ;;
		 esac

		 LICENSE_END_LINE=$(sed 's/:.*//' < "$TMP" | sed 1q)

		 if [ -n "$LICENSE_END_LINE" ]
		 then
		     if [ "$( grep -c Copyright "$file" )" -gt 1 ]
		     then
			 grep -n Copyright "$file" | sed 's/:.*//' > "$TMP"
			 top=$(sed 1q "$TMP")
			 bottom=$(tail -n 1 "$TMP")
			 sort < "$TMP" > "$TMP6"

			 if [ "$bottom" -gt "$LICENSE_END_LINE" ]
			 then bottom=$(( LICENSE_END_LINE - 1 ))
			 fi
			 # cat "$TMP"
			 sort -o "$TMP" "$TMP"
			 seq "$top" "$bottom" | sort > "$TMP2"
			 # cat "$TMP2"
			 if ! diff "$TMP" "$TMP2" >  "$TMP3"
			 then
			     # cat "$TMP3"
			     # echo "$file"
			     # echo $top $bottom
			     egrep -n '([^[:space:][:alnum:]])\1\1\1' "$file" | sed 's/:.*//' | sort > "$TMP4"
			     # cat "$TMP4"
			     warning copyright-lines-have-separators "Separator lines found within a list of Copyright lines:"
			     comm -12 "$TMP2" "$TMP4" | sort -n > "$TMP5"
			     # cat "$TMP5"
			     # shellcheck disable=SC2046
			     # SC2046: quote to prevent word splitting
			     onap-gerrit-review-print-lines -H -B1 -A1 "$file" $(< "$TMP5") | modify_input
			     echo
			 fi
		     fi
		 fi

		 if egrep "[[:alnum:]]+[[:space:]]*Copyright" "$file" /dev/null > "$TMP"
		 then error text-before-copyright "Text found before 'Copyright' on these lines:"
		      modify_input < "$TMP"
		 else success "No text found before 'Copyright'"
		 fi

	    elif grep -i "Copyright[[:space:]]*[(][Cc][)].*$YEAR" "$file" /dev/null > /dev/null ||
		    grep -i "Copyright.*$YEAR" "$file" /dev/null > /dev/null
	    then "$ERROR" copyright-mispelled "Copyright $YEAR found but 'Copyright' has bad capitalizations in $file"
	    elif [ "$file" = INFO.yaml ] # might need a list of files that do not require copyright but would otherwise be caught here
	    then success "Ignoring copyright info in $file"
	    elif [ -n "$YEAR" ]
	    then "$ERROR" copyright-year-not-found-in-file "Copyright $YEAR not found in $file"
	    else "$ERROR" copyright-not-found-in-file "Copyright not found in $file"
	    fi

	done
    fi
}

# verify that all of the updated files with copyrights have the same updated copyright company
crossCheckCopyrights()
{
    sort -u "$COPYRIGHTFILES" -o "$COPYRIGHTFILES"
    PRINT_EXTRA_COPYRIGHT_INFO=false
    if $PRINT_EXTRA_COPYRIGHT_INFO
    then
	echo ">>>>>>>>>>>>>>>> all copyrights <<<<<<<<<<<<<<<<"
	modify_input < "$COPYRIGHTLIST"
	echo ">>>>>>>>>>>>>>>> copyright files <<<<<<<<<<<<<<<<"
	sort "$COPYRIGHTFILES" | modify_input
    fi

    local copyright_count
    copyright_count=$(wc -l < "$COPYRIGHTFILES")
    : > "$TMP2"
    [ "$copyright_count" -eq 0 ] && return
    echo "$copyright_count files were found with copyright." >> "$TMP2"
    echo "These unique copyright texts were found:" >> "$TMP2"
    sed "s/^.*copyright.*$YEAR//i" < "$COPYRIGHTLIST" | sort -u > "$TMP"
    sed 's/^[[:space:]]*/    /' "$TMP" >> "$TMP2"

    local found_equal; found_equal=false
    while read -r copyright_text
    do
	local found_count
	: echo grep -c -e "$copyright_text" "$COPYRIGHTLIST"
	found_count=$(grep -c -e "$copyright_text" "$COPYRIGHTLIST")
	echo "Found '$copyright_text' in $found_count files." >> "$TMP2"
	fgrep -e "$copyright_text" "$COPYRIGHTLIST" | modify_input >> "$TMP2"
	fgrep -e "$copyright_text" "$COPYRIGHTLIST" | sed 's/:.*//' | sort > "$TMP3"
	echo "Did NOT find '$copyright_text' in:" >> "$TMP2"

	# echo "FOUND  '$copyright_text' in:"
	# fgrep -e "$copyright_text" "$COPYRIGHTLIST"
	# echo "Did NOT find '$copyright_text' in:"
	# comm -23 "$COPYRIGHTFILES" "$TMP3"
	# echo ====

	comm -23 "$COPYRIGHTFILES" "$TMP3" | modify_input >> "$TMP2"
	if [ "$found_count" -eq "$copyright_count" ]
	then
	    found_equal=true
	    success "All changed files with copyright were found to have '$copyright_text'"
	fi
    done < "$TMP"
    if "$found_equal"
    then : success messages were given above
    else
	error current-copyright-not-in-all-files "None of the copyright texts were found to exist in all files that have copyrights." &&
	    modify_input < "$TMP2"
    fi
    if $PRINT_EXTRA_COPYRIGHT_INFO
    then
	echo ">>>>>>>>>>>>>>>> copyright checks <<<<<<<<<<<<<<<<"
	modify_input < "$TMP2"
    fi
}

checkEOL()
{
    if [ $# -eq 0 ]
    then success No files to check for a NL ending
    elif
	# shellcheck disable=SC2086
	# SC2086: double quote to prevent globbing and word splitting
	onap-gerrit-review-verify-eol $SUBVERBOSITY -s "$@" > "$TMP" 2>&1
    then success "ALL files have a NL ending"
    else error no-nl-ending-on-files "Some files do not have a NL ending:" &&
	    modify_input < "$TMP"
    fi
}

checkXML()
{
    if [ $# -eq 0 ]
    then success No XML files to check
    elif
	# shellcheck disable=SC2086
	# SC2086: double quote to prevent globbing and word splitting
	onap-gerrit-review-verify-xml $SUBVERBOSITY -s "$@" > "$TMP" 2>&1
    then success "ALL XML files verified"
    else error invalid-xml-found "XML files were found that did not have valid XML in them" &&
	    modify_input < "$TMP"
    fi
}

checkTODO()
{
    if [ $# -eq 0 ]
    then success No files to check for TODO in
    elif fgrep -n TODO "$@" > "$TMP"
    then
	warning found-todo-in-file "Some files have TODO in them:" &&
	    modify_input < "$TMP"
    else
	success "No files have TODO in them"
    fi
}

checkLeadingTabs()
{
    if [ $# -eq 0 ]
    then success "No $CHECKTYPE files to look in for tab indentations"
    elif
	# shellcheck disable=SC2086
	onap-gerrit-review-find-leading-tabs $ALLTABS "$@" > "$TMP"
    then
	success "No files have tab indentations in them"
    else
	FIRSTLINEMSG=
	[ -z "$ALLTABS" ] && FIRSTLINEMSG=". The first line found in each file is shown"
	error tabbed-indentation "Some files have tab indentations in them$FIRSTLINEMSG:" &&
	    modify_input < "$TMP"
    fi
}

checkPylint()
{
    if [ "$#" -eq 0 ]
    then success No py files for pylint
    elif ! verifypaths pylint
    then error no-pylint-in-path Cannot find pylint in your path
    else
	for file
	do
	    if PYLINTRC="$ONAP_GERRIT_REVIEW_PYLINTRC" pylint "$file" > "$TMP" 2>&1
	    then
		success "Pylint generated no errors for $file"
	    else
		error found-pylint-errors "Pylint generated errors for $file:" &&
		    modify_input < "$TMP"
	    fi
	done
    fi
}

checkDockerfile()
{
    if [ "$#" -eq 0 ]
    then success "No Dockerfile's"
    else
	for file
	do
	    # check for USER root, make sure there's another USER statement
	    # after it for something other than root
	    if egrep "^USER[[:space:]]+root" "$file" > /dev/null
	    then
		if egrep "^USER" < "$file" | tail -n 1 | egrep "^USER[[:space:]]+root" > /dev/null
		then error dockerfile-user-root "The last USER statement in $file is for root"
		else success "The last USER statement in $file is not for root"
		fi
	    fi

	    # use hadolint ? dockerlinter
	    if [ -n "$ONAP_GERRIT_REVIEW_DOCKERLINTER" ]
	    then
		if ! verifypaths dockerlinter
		then error no-pylint-in-path Cannot find dockerlinter in your path
		else
		    dockerlinter -s sh -f "$file" > "$TMP" 2>&1
		    if [ -s "$TMP" ]
		    then
			error found-dockerlinter-errors "dockerlinter generated errors for $file:" &&
			    modify_input < "$TMP"
		    else success "dockerlinter generated no errors for $file"
		    fi
		fi
	    fi
	done
    fi
}

checkPydocstyle()
{
    if [ "$#" -eq 0 ]
    then success No py files for pylint
    elif ! verifypaths pydocstyle
    then error no-pydocstyle-in-path Cannot find pydocstyle in your path
    else
	for file
	do
	    if pydocstyle --convention="$ONAP_GERRIT_REVIEW_PYDOCSTYLE" "$file" > "$TMP" 2>&1
	    then
		success "Pydocstyle generated no errors for $file"
	    else
		error found-pydocstyle-errors "Pydocstyle generated errors for $file:" &&
		    modify_input < "$TMP" | sed 's/\(:[0-9][0-9]*\) /\1: /'
	    fi
	done
    fi
}

checkBlack()
{
    if [ "$#" -eq 0 ]
    then success No py files for black
    else
	if python3 -m black --line-length 120 "$@" > "$TMP" 2>&1
	then
	    success "Black -l 120 generated no errors"
	    "$SILENT" || cat "$TMP"
	else
	    error found-black-errors "Black -l 120 generated errors:" &&
		modify_input < "$TMP"
	fi
    fi
}

checkJslinter()
{
    if [ "$#" -eq 0 ]
    then success 'No js files for jshint/jslint'
    else
	for jslinter in $ONAP_GERRIT_REVIEW_JSLINTERS
	do
	    if case "$jslinter" in
		   jslint )
		       verifypaths node
		       node jslint.mjs "$@" > "$TMP" 2>&1
		       ;;
		   jshint )
		       verifypaths jshint
		       echo '{"esversion":6}' > "$JSHINTFILE"
		       jshint --config "$JSHINTFILE" "$@" > "$TMP" 2>&1
		       ;;
		   * )
		       # shellcheck disable=SC2016
		       # SC2016: expressions don't expand in single quotes
		       die '$ONAP_GERRIT_REVIEW_JSLINTERS must be set to either jshint' ;; # or jslint' ;;
	       esac
	    then
		success "jslinter generated no errors"
		"$SILENT" || cat "$TMP"
	    else
		error "found-$jslinter-errors" "$jslinter generated errors:" &&
		    modify_input < "$TMP"
	    fi
	done
    fi
}

needsVersionProperties()
{
    local dir; dir="$1"

    if check_disabled_message version-properties-missing
    then
	return 1
    else
	# Dockerfile or docker.image.name requires version.properties
	if [ -n "$(find "$dir" -type f -name Dockerfile -print)" ]
	then : found a Dockerfile; return 0
	elif fgrep "<docker.image.name>" "$dir/pom.xml" > /dev/null
	then : found docker.image.name in pom.xml; return 0
	fi
	: neither Dockerfile nor docker.image.name found
	return 1
    fi
}

multi_checks()
{
    local FILESTOCHECK; FILESTOCHECK="$1"

    sort -o "$FILESTOCHECK" "$FILESTOCHECK"

    # shellcheck disable=SC2046
    # SC2046: quote to prevent word splitting
    checkXML $(grep "[.]xml$" "$FILESTOCHECK")

    # shellcheck disable=SC2046
    CHECKTYPE=yaml checkCopyright -w $(egrep "[.](ya?ml|yaml-template)$" "$FILESTOCHECK" | grep -v '^releases/')

    # shellcheck disable=SC2046
    for ext in $COPYRIGHT_EXTENSIONS
    do
	case "$ext" in
	    py )
		# shellcheck disable=SC2046
		CHECKTYPE=$ext checkCopyright $(onap-gerrit-review-find-file-type -s py -! python - < "$FILESTOCHECK")
		;;
	    sh )
		# shellcheck disable=SC2046
		CHECKTYPE=$ext checkCopyright $(onap-gerrit-review-find-file-type -s sh -! sh - < "$FILESTOCHECK")
		;;
	    * )
		CHECKTYPE=$ext checkCopyright $(grep "[.]$ext$" "$FILESTOCHECK")
		;;
	esac
    done

    for fname in Dockerfile Dockerfile-template LICENSE.txt
    do
	# shellcheck disable=SC2046
	CHECKTYPE=$fname checkCopyright $(egrep "$fname$" "$FILESTOCHECK")
    done

    # check the REST of the new files for any that have the word Copyright in them
    sort -o "$COPYRIGHTCHECKED" "$COPYRIGHTCHECKED"
    comm -23 "$FILESTOCHECK" "$COPYRIGHTCHECKED" > "$TMP"
    # shellcheck disable=SC2046
    if [ -s "$TMP" ]
    then grep -l "Copyright" $(< "$TMP") > "$TMP2"
    else : > "$TMP2"
    fi
    if [ -s "$TMP2" ]
    then
	# shellcheck disable=SC2046
	CHECKTYPE=other checkCopyright $(< "$TMP2")
    else success No additional files found with a Copyright notice
    fi

    "$DOCROSSCHECK" && crossCheckCopyrights
    # shellcheck disable=SC2046
    checkEOL $(< "$FILESTOCHECK")
    # shellcheck disable=SC2046
    checkTODO $(< "$FILESTOCHECK")

    for ext in $NOTAB_EXTENSIONS
    do
	# shellcheck disable=SC2046
	CHECKTYPE=$ext checkLeadingTabs $(grep "[.]$ext$" "$FILESTOCHECK")
    done
    # shellcheck disable=SC2046
    CHECKTYPE=$ext checkLeadingTabs $(grep "pom[.]xml$" "$FILESTOCHECK")

    # shellcheck disable=SC2046
    CHECKTYPE=Dockerfile checkDockerfile $(grep "Dockerfile$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_PYLINTRC" ] && checkPylint $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_PYDOCSTYLE" ] && checkPydocstyle $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_BLACK" ] && checkBlack $(grep "[.]py$" "$FILESTOCHECK")
    # shellcheck disable=SC2046
    [ -n "$ONAP_GERRIT_REVIEW_JSLINTERS" ] && checkJslinter $(grep "[.]js$" "$FILESTOCHECK")
}

checkInfoYaml()
{
    if [ -n "$ONAP_GERRIT_REVIEW_INFO_YAML_SCHEMA" ]
    then
	if onap-gerrit-review-verify-schema --schema "$ONAP_GERRIT_REVIEW_INFO_YAML_SCHEMA" INFO.yaml > "$TMP"
	then success "INFO.yaml passed schema verification"
	else error bad-info-yaml "INFO.yaml failed schema verification"
	     modify_input < "$TMP"
	fi
    fi
}

SILENT=false
NOTSILENT=true
LIMIT=false
SUBVERBOSITY=
ALLTABS=
SUPPRESSMESSAGE=true
FORCESUPPRESSMESSAGE=false
while getopts Elm:qQstVxX opt
do
    case "$opt" in
	E ) echo exit-code-on-errors >> "$RMMESSAGES" ;;
	l ) LIMIT=true ;;
	m ) echo "$OPTARG" | tr ', \t' '\n' | grep -v '^$' | sed 's/^[-]*/-/' >> "$RMMESSAGES" ;;
	q ) SUPPRESSMESSAGE=false ;;
	Q ) FORCESUPPRESSMESSAGE=true ;;
	s ) SILENT=true NOTSILENT=false ;;
	t ) ALLTABS=-a ;;
	V ) echo "Version: $GITVERSIONSTAMP"; exit 0 ;;
	x ) set -x ;;
	X ) SUBVERBOSITY="$SUBVERBOSITY -v" ;;
	* ) usage ;;
    esac
done
shift $(( OPTIND - 1 ))

if [ $# -eq 0 ]
then usage
fi

STARTDIR=$(pwd)
exitcode=0

total_successcount=0
total_warningcount=0
total_errorcount=0
total_ignoredcount=0

for TOPDIR
do
    successcount=0
    warningcount=0
    errorcount=0
    ignoredcount=0
    : > "$COPYRIGHTLIST"
    : > "$COPYRIGHTFILES"
    : > "$COPYRIGHTCHECKED"

    case "$TOPDIR" in
	/* ) ;;
	* ) TOPDIR="$STARTDIR/$TOPDIR" ;;
    esac
    POMDIR="$TOPDIR"
    # TOPPOMDIR="$TOPDIR"

    if ! "$SILENT" || [ $# -gt 1 ]
    then echo "Using $TOPDIR"
    fi

    cd "$TOPDIR" || die "Cannot cd $TOPDIR"
    verifypaths # make sure things are STILL accessible after the cd
    if "$SILENT"
    then onap-gerrit-review-rename-files --recurse --rename .
    else onap-gerrit-review-rename-files --recurse --rename --print .
    fi

    if [ -f .temp.git-log ]
    then
	"$SILENT" || echo New files:
	find . -type f -newer .temp.git-log |
	    fgrep -v ./.git/ |
	    egrep -v '^[.]/[.]git$' |
	    sed 's!^[.]/!!' |
	    sort |
	    egrep -v '^[.]temp[.]git-log2?$'  > "$NEWFILES"		# !!!!!!!!!!!!!!!! TODO: look at this
	dirnameloop < "$NEWFILES" | sort -u > "$NEWDIRS"

	if "$NOTSILENT"
	then
	    echo "Files with mods:"
	    modify_input < "$NEWFILES"
	    echo
	    echo "Directories with mods:"
	    modify_input < "$NEWDIRS"
	    echo
	fi
    elif "$LIMIT"
    then
	echo ================================================================ 1>&2
	error no-temp-git-log "No .temp.git-log was found for use with the -l option. Skipping rest of $TOPDIR"
	echo ================================================================ 1>&2
	(( total_errorcount = total_errorcount + errorcount ))
	exitcode=1
	continue
    fi
    egrep -v "\.rst$" "$NEWFILES" > "$TMP"
    if [ -s "$TMP" ]
    then RST_ONLY=false
    elif [ -s "$NEWFILES" ]
    then RST_ONLY=true
    else RST_ONLY=false
    fi
    egrep -vi "test[^/]*$" "$NEWFILES" > "$TMP"
    if [ -s "$TMP" ]
    then TEST_ONLY=false
    elif [ -s "$NEWFILES" ]
    then TEST_ONLY=true
    else TEST_ONLY=false
    fi
    egrep -v "^INFO.yaml$" "$NEWFILES" > "$TMP"
    if [ -s "$TMP" ]
    then INFO_YAML_ONLY=false
    elif [ -s "$NEWFILES" ]
    then INFO_YAML_ONLY=true
    else INFO_YAML_ONLY=false
    fi

    find * -type f -print | fgrep -v /.git/ > "$FLIST"
    egrep -i '(^|/)pom[.]xml$' "$FLIST" > "$POMFILES"
    dirnameloop < "$POMFILES" | sort -u > "$ALLPOMDIRS"
    grep -v '^[.]$' < "$ALLPOMDIRS" > "$POMDIRS"

    if [ -f LICENSE.txt ]
    then success Found a top-level LICENSE.txt file
    else error no-top-level-license-txt-file Did not find a top-level LICENSE.txt file
    fi
    find . -name 'LICENSE*' > "$TMP4"
    while read -r license_file
    do
	case "$license_file" in
	    LICENSE.txt | */LICENSE.txt )
		success "License file $license_file is named LICENSE.txt" ;;
	    * ) error misnamed-license-txt "The file $license_file should be named LICENSE.txt" ;;
	esac
	if fgrep "Apache License, Version 2.0" "$license_file" > /dev/null
	then success "Found 'Apache License, Version 2.0' reference in $license_file"
	else error no-apache-license "Did not find 'Apache License, Version 2.0' reference in $license_file"
	fi
    done < "$TMP4"

    for i in 'changelog[.]md' 'version[.]properties'
    do
	egrep -i "(^|/)$i$" "$FLIST"
    done |
	dirnameloop | sort -u > "$ALLWDIRS"
    grep -v '^[.]$' < "$ALLWDIRS" > "$WDIRS"

    if "$NOTSILENT"
    then
	echo Directories with pom.xml:
	sort -u "$ALLPOMDIRS" | modify_input
	echo Directories with any of changelog.md or version.properties:
	sort -u "$ALLWDIRS" | modify_input
    fi
    if [ ! -s "$POMDIRS" ]
    then
	cp "$ALLPOMDIRS" "$POMDIRS"
	cp "$ALLWDIRS" "$WDIRS"
	"$SILENT" || echo "Including top level directory"
    else
	"$SILENT" || echo "Skipping top level directory"
    fi

    for POMDIR in $( < "$POMDIRS" )
    do
	"$SILENT" || echo "Working on $POMDIR"
	if "$LIMIT" && [ -f .temp.git-log ]
	then
	    if grep -e "$POMDIR" "$NEWDIRS" > /dev/null
	    then "$SILENT" || echo "Found $POMDIR in directories with mods"
	    else continue
	    fi
	fi

	"$SILENT" || echo
	: echo ls -l "$POMDIR/pom.xml" "$POMDIR/version.properties" "$POMDIR/setup.py"
	: ls -l "$POMDIR/pom.xml" "$POMDIR/version.properties" "$POMDIR/setup.py"
	artifactId=$(onap-gerrit-review-extract-xml -i "$POMDIR/pom.xml" "${POMNS}artifactId")
	versionSN=$(onap-gerrit-review-extract-xml -p "$POMDIRS" -n "${POMNS}" -i "$POMDIR/pom.xml" "${POMNS}version")
	versionPVSN=$(onap-gerrit-review-extract-xml -p "$POMDIRS" -n "${POMNS}" -i "$POMDIR/pom.xml" "${POMNS}parent/${POMNS}version")
	versionPV=${versionPVSN//-SNAPSHOT/}
	version=${versionSN//-SNAPSHOT/}
	: "POMDIR=$POMDIR versionSN=$versionSN versionPVSN=$versionPVSN"
	if [ -z "$version" ] || [ "$version" = None ]
	then
	    if [ "$POMDIR" != . ]
	    then
		version="$versionPV"
		warning using-parent-version-in-pom "No version info found in $POMDIR/pom.xml. Using parent version instead"
	    fi
	fi
	"$SILENT" || echo "================ $POMDIR ==== $artifactId ==== $versionSN -- $version ================"

	if [ -z "$version" ] || [ "$version" = None ]
	then
	    error no-version-in-pom No version info found in "$POMDIR/pom.xml"

	elif [ "$artifactId" = None ]
	then
	    error no-artifactid-in-pom-id No artifactId info found in "$POMDIR/pom.xml"

	else
	    # shellcheck disable=SC2016
	    case "$version" in
		'${'*'}' )
		    error pom-version-unexpanded-property "Could not find a definition for the property reference '$version' in $POMDIR/pom.xml"
		    ;;
		* )

		    : ================ POMDIR="$POMDIR" ================
		    if [ -f "./releases/$artifactId-$version-container.yaml" ]
		    then
			if fileIncluded "releases/$artifactId-$version-container.yaml"
			then success "$POMDIR/pom.xml version $version is being released now"
			else error pom-version-already-released "$POMDIR/pom.xml version $version has already been released and needs to change"
			fi
		    elif [ "$POMDIR" = . ] && [ -f "./releases/$version-container.yaml" ]
		    then
			if fileIncluded "releases/$version-container.yaml"
			then success "$POMDIR/pom.xml version $version is being released now"
			else error pom-version-already-released "$POMDIR/pom.xml version $version has already been released and needs to change"
			fi
		    else success "$POMDIR/pom.xml version $version has not been released"
		    fi

		    cl=$( find "$POMDIR" -type f -print | grep -i changelog.md )
		    if [ -n "$cl" ]
		    then
			"$SILENT" || echo "Looking at $cl"
			: check that version is found within
			# shellcheck disable=SC2086
			clv=$(grep "^##[[:space:]]*[[]$version[]]" $cl)
			if [ -n "$clv" ]
			then success "Found $version in $cl"
			else error version-not-found-in-changelog "Did not find version $version in $cl"
			fi
			# shellcheck disable=SC2086
			if grep -n '[[:digit:]][[:digit:]][-/][[:digit:]][[:digit:]][-/][[:digit:]][[:digit:]][[:digit:]][[:digit:]]' $cl > "$TMP"
			then error changelog-ambiguous-dates "Found ambiguous dates in $cl:" &&
				modify_input < "$TMP"
			else success "Did not find ambiguous dates in $cl"
			fi

			: are the numbers increasing or decreasing?
			for clf in $cl
			do
			    : ">>>> looking at $clf"
			    egrep '^## [[][[:digit:]]+[.][[:digit:]]+([.][[:digit:]])?[]]' "$clf" |
				awk '{print $2}' |
				sed 's/[][]//g' |
				awk -F. '{print $1 * 1000000 + $2 * 1000 + $3}'  > "$TMP"
			    # cat "$TMP"
			    # echo ".... sorting"
			    sort -rn "$TMP" > "$TMP2"
			    # cat "$TMP2"
			    if cmp "$TMP" "$TMP2" > /dev/null
			    then
				success "The version numbers in $clf are in the correct order"

				: now check TOP version
				topversion=$(egrep '^## [[][[:digit:]]+[.][[:digit:]]+([.][[:digit:]]+)?[]]' "$clf" | sed 1q | awk '{print $2}')
				if [ "[$version]" = "$topversion" ]
				then success "The top-most version in $clf matches version $version"
				else error changelog-topversion-mismatch "The top-most version in $clf ($topversion) does not match version [$version] found elsewhere. Do you need a version bump in pom.xml and other files, or should you still be using $version?"
				fi

			    else error changelog-versions-misordered "The version numbers in $clf are not in the correct order" &&
				    awk '
	    				BEGIN { prev="" }
					prev != "" {
					    if ($1 > prev) {
	    					m1 = int($1 / 1000000)
						m2 = int($1 / 1000) % 1000
						m3 = $1 % 1000
						p1 = int(prev / 1000000)
						p2 = int(prev / 1000) % 1000
						p3 = prev % 1000
						print m1 "." m2 "." m3 " should be before " p1 "." p2 "." p3
					    }
					}
					{ prev = $1 }
					' "$TMP"
			    fi
			done

		    elif "$RST_ONLY"
		    then
			success "Only found .rst files, no $POMDIR/ChangeLog.md required"

		    elif "$INFO_YAML_ONLY"
		    then
			success "Only found a INFO.yaml file, no $POMDIR/ChangeLog.md required"

		    else
			error changelog-missing "No $POMDIR/ChangeLog.md found"
		    fi

		    if [ -f "$POMDIR/version.properties" ]
		    then
			"$SILENT" || echo "Looking at $POMDIR/version.properties"
			vp=$(version_properties_version "$POMDIR/version.properties")
			"$SILENT" || echo "	version=$vp"
			if [ "$version" = "$vp" ]
			then success "$POMDIR/pom.xml versions match in $POMDIR/version.properties: $vp"
			else error version-mismatch-pom-version-properties "$POMDIR/pom.xml version $version does not match $POMDIR/version.properties: $vp"
			fi
		    elif needsVersionProperties "$POMDIR"
		    then warning version-properties-missing "No $POMDIR/version.properties found for $POMDIR/pom.xml"
		    else success "No $POMDIR/version.properties file needed"
		    fi

		    FOUNDCODE=false
		    if hasPythonCode "$POMDIR"
		    then
			FOUNDCODE=true
			"$SILENT" || echo "Found python code in $POMDIR"
			if [ -f "$POMDIR/setup.py" ]
			then
			    "$SILENT" || echo "Looking at $POMDIR/setup.py"
			    sp=$(setup_version "$POMDIR/setup.py")
			    "$SILENT" || echo "	version=$sp"
			    if [ "$version" = "$sp" ]
			    then success "$POMDIR/pom.xml versions match in $POMDIR/setup.py: version $sp"
			    else error version-mismatch-pom-setup-py "$POMDIR/pom.xml version $version does not match $POMDIR/setup.py version $sp"
			    fi

			elif "$RST_ONLY"
			then
			    success "Only found .rst files, no $POMDIR/setup.py needed"

			elif "$INFO_YAML_ONLY"
			then
			    success "Only found INFO.yaml files, no $POMDIR/setup.py needed"

			else
			    error missing-setup-py "No $POMDIR/setup.py"
			fi
		    fi
		    ;;
	    esac

	    if hasJavascriptCode "$POMDIR"
	    then
		FOUNDCODE=true
		"$SILENT" || echo "Found javascript code in $POMDIR"
		if [ -f "$POMDIR/package.json" ]
		then
		    "$SILENT" || echo "Looking at $POMDIR/package.json"
		    pv=$(package_version "$POMDIR/package.json")
		    "$SILENT" || echo "	version=$pv"
		    if [ "$version" = "$pv" ]
		    then success "$POMDIR/pom.xml versions match in $POMDIR/package.json: version $pv"
		    else error version-mismatch-pom-package-json "$POMDIR/pom.xml version $version does not match $POMDIR/package.json version $pv"
		    fi

		elif "$RST_ONLY"
		then
		    success "Only found .rst files, no $POMDIR/package.json required"

		elif "$INFO_YAML_ONLY"
		then
		    success "Only found a INFO.yaml file, no $POMDIR/package.json required"


		else
		    error missing-package-json "No $POMDIR/package.json"
		fi
	    fi

	    if hasTypeCode java "$POMDIR" || hasTypeCode jsp "$POMDIR" || hasTypeCode scala "$POMDIR" || hasTypeCode kt "$POMDIR"
	    then : "TODO - do some checks on the java code?"
		FOUNDCODE=true
		"$SILENT" || echo "Found java code in $POMDIR"

		# jsp, scala, kt
		find "$POMDIR" -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep -l "import.*[*]" {} + | sed 's!^[.]/!!' | sort > "$JAVAFILES"
		if "$LIMIT"
		then
		    : echo javafiles=
		    : cat "$JAVAFILES"
		    : echo newfiles=
		    : modify_input < "$NEWFILES"
		    comm -12 "$JAVAFILES" "$NEWFILES" > "$TMP"
		    : echo common files:
		    : modify_input < "$TMP"
		    if [ -s "$TMP" ]
		    then error found-import-star "'import ... *' found in updated java files:"
			 modify_input < "$TMP"
			 # shellcheck disable=SC2046
			 # SC2046: quote to prevent word splitting
			 find $(<"$TMP") -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep "import.*[*]" {} + | modify_input
		    else success "No 'import ... *' found in updated java files"
		    fi

		else
		    if [ -s "$JAVAFILES" ]
		    then error found-import-star "'import ... *' found in:"
			 modify_input < "$JAVAFILES"
			 find "$POMDIR" -type f '(' -name "*.java" -o -name "*.jsp" -o -name "*.scala" -o -name "*.kt" ')' -exec grep "import.*[*]" {} + | modify_input
		    else success "No 'import ... *' found in java files"
		    fi
		fi
	    fi

	    if hasTypeCode json "$POMDIR"
	    then success Has JSON code
		 FOUNDCODE=true
		 JSONFILES="$JAVAFILES"
		 if "$LIMIT"
		 then grep -i '[.]json$' "$NEWFILES" > "$JSONFILES"
		 else find "$POMDIR" -type f -name "*.json" > "$JSONFILES"
		 fi
		 if [ -s "$JSONFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-json $SUBVERBOSITY -s $(< "$JSONFILES") > "$TMP" 2>&1
		     then success "JSON files all have valid JSON in them"
		     else error invalid-json-found "JSON files were found that did not have valid JSON in them"
			  modify_input < "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if hasTypeCode yaml "$POMDIR" || hasTypeCode yml "$POMDIR"
	    then success Has YAML code
		 FOUNDCODE=true
		 if "$LIMIT"
		 then
		     egrep -i '[.]ya?ml$' "$NEWFILES" > "$YAMLFILES"
		 else
		     find "$POMDIR" -type f '(' -name "*.yaml" -o -name '*.yml' ')' > "$YAMLFILES"
		 fi
		 if [ -s "$YAMLFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-yaml $SUBVERBOSITY -s $(< "$YAMLFILES") > "$TMP" 2>&1
		     then success "YAML files all have valid YAML in them"
		     else error invalid-yaml-found "YAML files were found that did not have valid YAML in them"
			  modify_input < "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if hasTypeCode yaml-template "$POMDIR"
	    then success Has YAML templates
		 FOUNDCODE=true
		 if "$LIMIT"
		 then egrep -i '[.]yaml-template$' "$NEWFILES" > "$YAMLFILES"
		 else find "$POMDIR" -type f -name "*.yaml-template" > "$YAMLFILES"
		 fi
		 if [ -s "$YAMLFILES" ]
		 then
		     # shellcheck disable=SC2046,SC2086
		     # SC2046: quote to prevent word splitting
		     # SC2086: double quote to prevent globbing and word splitting
		     if onap-gerrit-review-verify-yaml --template $SUBVERBOSITY -s $(< "$YAMLFILES") > "$TMP" 2>&1
		     then success "YAML templates all have valid YAML in them"
		     else error invalid-yaml-found "YAML templates were found that did not have valid YAML in them"
			  modify_input < "$TMP"
		     fi
		 else success "... but not in the new/modified files"
		 fi
	    fi

	    if hasTypeCode proto "$POMDIR"
	    then success has protobuf .proto files
		 FOUNDCODE=true
		 # nothing to check right now, so . . .
	    fi

	    if "$FOUNDCODE"
	    then success "Was able to determine the type of code in $POMDIR"
	    else error indeterminate-code "Cannot determine the type of code in $POMDIR"
	    fi
	fi
    done # for POMDIR in $( < "$POMDIRS" )
    POMDIR=$TOPDIR

    if "$LIMIT" # [ -f .temp.git-log ]
    then
	if fgrep -i changelog.md "$NEWFILES" > "$CLFILES"
	then
	    if "$NOTSILENT"
	    then
		echo "ChangeLog.md files:"
		modify_input < "$CLFILES"
	    fi
	    success "Found a ChangeLog.md file in the updated files"
	    if [ ! -f .temp.git-log2 ]
	    then success Working without a .temp.git-log2 file
	    else
		ISSUEID=$(
		    diff .temp.git-log .temp.git-log2 |
			awk '
			    BEGIN { commitcount = 0; foundissueid = 0; }
			    /^>* *commit/ { commitcount++; if (commitcount > 1 && foundissueid) exit }
			    $2 == "Issue-ID:" { print $3; foundissueid = 1; }' |
			sort -u
		       )
		# echo "ISSUEID=$ISSUEID"
		if [ -n "$ISSUEID" ]
		then
		    # head -n 50 $(<"$CLFILES") /dev/null
		    # shellcheck disable=SC2086
		    success "Found Issue-ID: in the git log commit:" $ISSUEID
		    for issueid in $ISSUEID
		    do
			# shellcheck disable=SC2046
			# SC2046: quote to prevent word splitting
			if grep -e "$issueid" $(<"$CLFILES") > /dev/null
			then success "Found Issue-ID: $issueid in the changed ChangeLog.md files"
			else
			    # echo "===="
			    # cat "$NEWFILES"
			    if [ "$(wc -l < "$NEWFILES")" -eq 1 ]
			    then success "No Issue-ID: required for ChangeLog.md file"
			    else error changelog-no-issue-id "Did not find Issue-ID: $issueid in the changed ChangeLog.md files"
			    fi
			fi
		    done
		else error gitlog-commit-no-issue-id "Did not find an Issue-ID: in the git log commit"
		fi
	    fi

	elif fgrep -i releases/ "$NEWFILES" > "$RELEASEFILES"
	then
	    # TODO:
	    # releases name is ARTIFACTID-VERSION-container.yaml
	    # OR VERSION-ARTIFACTID-container.yaml
	    # OR just VERSION-container.yaml
	    # There are also different types of files that do NOT have have -container in the name.
	    #
	    # Find the pom file with the same artifactId
	    # Make sure that:
	    #    pom.xml, changelog.md and version-properties all have the same VERSION

	    # We COULD do a poke in the Jenkins build tree to see if that container actually exists.

	    # Make sure that the data inside of the releases file is consistent.
	    # shellcheck disable=SC2046,SC2086
	    # SC2046: quote to prevent word splitting
	    # SC2086: double quote to prevent globbing and word splitting
	    if onap-gerrit-review-verify-releasefile $SUBVERBOSITY -n -p "$POMFILES" -s $(< "$RELEASEFILES") > "$TMP" 2>&1
	    then
		success "Release files verified"
	    else
		error release-file-issue "Release files have problems"
		modify_input < "$TMP"
	    fi

	elif "$RST_ONLY"
	then
	    success "Only found .rst files"

	elif "$INFO_YAML_ONLY"
	then
	    success "Only found a INFO.yaml file"
	    checkInfoYaml

	elif "$TEST_ONLY"
	then
	    success "Only found *test* files"

	else
	    error changelog-or-release-file-missing "Did not find either a ChangeLog.md or a releases file in the updated files"
	fi

	FILESTOCHECK=$NEWFILES
	DOCROSSCHECK=true multi_checks "$NEWFILES"

    else # not [ -f .temp.git-log ]
	find * -type f | sort > "$ALLFILES"

	YEAR='' DOCROSSCHECK=false multi_checks "$ALLFILES"

	if [ -d releases ]
	then
	    # Make sure that the data inside of the releases file is consistent.
	    # shellcheck disable=SC2086
	    # SC2086: double quote to prevent globbing and word splitting
	    if onap-gerrit-review-verify-releasefile $SUBVERBOSITY -s releases/*.yaml > "$TMP" 2>&1
	    then
		success "Release files verified"
	    else
		error release-file-issue "Release files have problems"
		modify_input < "$TMP"
	    fi
	fi
	[ -f INFO.yaml ] && checkInfoYaml
    fi # if [ -f .temp.git-log ]

    echo "Using $TOPDIR"

    echo "Total: $errorcount Errors, $warningcount Warnings, $ignoredcount Ignored, $successcount Successful tests run on $TOPDIR"
    [ $# -gt 1 ] && echo
    [ "$errorcount" -gt 0 ] && exitcode=1

    (( total_successcount = total_successcount + successcount ))
    (( total_warningcount = total_warningcount + warningcount ))
    (( total_errorcount = total_errorcount + errorcount ))
    (( total_ignoredcount = total_ignoredcount + ignoredcount ))

    if "$SILENT"
    then onap-gerrit-review-rename-files --recurse --rename --undo .
    else onap-gerrit-review-rename-files --recurse --rename --undo --print .
    fi

done

if [ $# -gt 1 ]
then
    echo "Grand Total: $total_errorcount Errors, $total_warningcount Warnings, $total_ignoredcount Ignored, $total_successcount Successful tests"
fi

if "$SUPPRESSMESSAGE" || "$FORCESUPPRESSMESSAGE"
then
    if "$FORCESUPPRESSMESSAGE" ||
	    [ "$total_errorcount" -gt 0 ] ||
	    [ "$total_warningcount" -gt 0 ]
    then
	cat <<-'EOF'

		How to suppress an error or warning message
		===========================================

		The best way of course to suppress an error or warning message is to fix the cause of the error or warning message!
		But if for some reason it can NOT be fixed or it is a false negative message,
		there are ways to suppress a message either temporarily and permanently.

		Each error and warning message has a code associated with it printed in parentheses
		after the word `ERROR:` or `WARNING:`.


		TEMPORARY SUPPRESSION
		---------------------

		The error and warning messages may be turned off (ignored) temporarily by listing the codes
		(with a hyphen in front) in the commit message, preceded by "onap-gerrit-review:", as in
		"`onap-gerrit-review: -no-top-level-license-txt-file`".
		That error message and any associated additional information will not be printed;
		nor will the error cause the program to exit with an error code.

		A more extended example is:

		commit 96bb1937750e59e028ae9d06c3689183b2e014a2
		Author: Someone <someone@company.com>
		Date:   Tue Apr 28 19:38:41 2022 +0000

		    Readme updated to include something
		    onap-gerrit-review: -changelog-or-release-file-missing

		    Change-Id: Iafac92c7fa59103cc48372882d7558b5ca466a17
		    Signed-off-by: Someone <someone@company.com>
		    Issue-ID: PROJECT-2974

		PERMANENT SUPPRESSION
		---------------------

		Error and warning messages may be turned off (ignored) permanently by listing the codes
		(with a hyphen in front) in a `pom.xml` file within a `properties/onap-gerrit-review`
		block, as in the following example:

		  <properties>
		    <onap-gerrit-review>
		      -code1
		      -code2
		      -code3,-code4,-code5
		    </onap-gerrit-review>
		  </properties>

		As shown in the example, the codes may be listed on separate lines, or on a single line separated by commas.
		For messages that are associated with a specific `pom.xml` file (e.g., checks for a `version.properties` file),
		the `onap-gerrit-review` block can be given in that particular `pom.xml` file, or any `pom.xml` in the
		directories above up to the top level `pom.xml` of the repo.

		NOTE: The lowest-most `pom.xml` file should be used for a particular message. For example,
		`changelog-missing` should NEVER be suppressed from the top-most `pom.xml`, but ONLY from
		lower-level `pom.xml` files.

		The error messages listed, and any associated additional information, will not be printed;
		nor will the error cause the program to exit with an error code.


		EOF
    fi
fi

if POMDIR=. check_disabled_message exit-code-on-errors
then exit 0
else exit "$exitcode"
fi
