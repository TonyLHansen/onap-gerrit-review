#!/usr/bin/env python3

"""
    Given a filename, check if it is of a specified type. The type can be specified by one or more suffixes (e.g. ".sh"), or by a program name pattern (e.g. "/bin/[a-z]*sh").
"""

import argparse
import os
import re
import sys

GITVERSIONSTAMP = "2022-07-28-12-19"


def file_match(args, reshbang, fname):
    """check if the file matches either args.suffix or args.shbang"""

    if args.verbose:
        print(f"file_match({fname})")

    if args.skip_dirs:
        for prefix in args.skip_dirs:
            if fname.startswith(prefix):
                if args.verbose > 1:
                    print(f"{fname}: skipped due to prefix {prefix}")
                return False

    if args.suffix:
        for suffix in args.suffix:
            if fname.endswith(suffix):
                if args.verbose > 1:
                    print("{fname}: matched on suffix {suffix}")
                return True

    if args.shbang:
        try:
            with open(fname) as fp:
                l = fp.readline()
                if reshbang.match(l):
                    if args.verbose > 1:
                        print("{fname}: matched on #! {args.shbang}")
                    return True

        except IsADirectoryError:
            pass

        except PermissionError as e:
            print(f"{fname}: Cannot open: {e}", file=sys.stderr)

        except Exception as e:
            print(f"{fname}: Cannot open: {e}", file=sys.stderr)

    return False


def pr_filename(args, fname):
    """Print the filename if needed"""
    if not args.quiet:
        if args.print0:
            print(fname, end="\0")
        else:
            print(fname)


def main():
    """
    Main entry
    """
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "-0",
        "--print0",
        action="store_true",
        help="Print the filenames with NUL-separators",
    )
    parser.add_argument("-s", "--suffix", type=str, help="Filename suffix to look for")
    parser.add_argument("-!", "--shbang", type=str, help="#! program pattern to look for")
    parser.add_argument(
        "-S",
        "--skip-dirs",
        type=str,
        help="directories to skip",
        default=os.environ.get("ONAP_GERRIT_REVIEW_SKIP_DIRS"),
    )
    parser.add_argument("-v", "--verbose", action="count", help="Be verbose", default=0)
    parser.add_argument("-V", "--version", action="store_true", help="Print the version")
    parser.add_argument("-q", "--quiet", action="store_true", help="Do not print the filenames")
    parser.add_argument("file", type=str, help="File to get lines from", nargs="*")
    args = parser.parse_args()

    if args.version:
        print(f"Version: {GITVERSIONSTAMP}")

    if args.suffix:
        suffixes = args.suffix.split()
        for i, suffix in enumerate(suffixes):
            if not suffix.startswith("."):
                suffixes[i] = "." + suffix
        args.suffix = suffixes

    if args.skip_dirs:
        skip_dirs = args.skip_dirs.split()
        for i, prefix in enumerate(skip_dirs):
            if not prefix.endswith("/"):
                skip_dirs[i] += "/"
        args.skip_dirs = skip_dirs

    if args.shbang:
        args.shbang = "#!.*" + args.shbang
        reshbang = re.compile(args.shbang)
    else:
        reshbang = None

    ret = 1
    for fname in args.file:
        if fname == "-":
            for ln in sys.stdin:
                ln = ln.strip()
                if file_match(args, reshbang, ln):
                    if args.verbose > 1:
                        print(f"fname matched: {ln}")
                    ret = 0
                    pr_filename(args, ln)

        elif file_match(args, reshbang, fname):
            if args.verbose > 1:
                print(f"fname matched: {fname}")
            ret = 0
            pr_filename(args, fname)

    if args.verbose > 1:
        print(f"ret={ret}")
    sys.exit(ret)


if __name__ == "__main__":
    main()
