#!/usr/bin/env python3

"""
    Verify that a release file looks correct
"""

import argparse
import io
import os
import re
import sys
import traceback
import xml.etree.ElementTree as ET
import yaml


XML_FILES = {}
NS = "{http://maven.apache.org/POM/4.0.0}"
GITVERSIONSTAMP = "2022-08-30-23-07"


class ReCheck:
    """
    A class that deals with repeated searches for various patterns, maintaining state,
    so that the result can be tested and then actually immediately used.

    The name and initial idea for ReCheck came from here:
    https://stackoverflow.com/questions/122277/how-do-you-translate-this-regular-expression-idiom-from-perl-into-python
    but the implementation has expanded considerably from there.
    """

    def __init__(self):
        self.result = None

    def search(self, pattern, text, flags=0):
        """do a search, save the result"""
        self.result = re.search(pattern, text, flags=flags)
        return self.result

    def match(self, pattern, text, flags=0):
        """do a match, save the result"""
        self.result = re.match(pattern, text, flags=flags)
        return self.result

    def group(self, grp=0):
        """return the result's group"""
        return self.result.group(grp)

    def groups(self, dflt=None):
        """return the result's groups"""
        return self.result.groups(dflt)


def get_xml(fname):
    """
    Retrieve the contents of fname as an XML DOM
    """
    # xpylint: disable=global-variable-not-assigned
    abs_fname = os.path.abspath(fname)
    xml = XML_FILES.get(abs_fname)
    if xml is None:
        try:
            with open(abs_fname) as fd:
                xml_contents = fd.read()
                xml = ET.fromstring(xml_contents)
                XML_FILES[abs_fname] = xml
        except Exception as e:
            sys.exit(f"{fname}: Cannot read XML file: {e}")
    return xml


def get_xml_text(root, path):
    """
    Extract the text for the element at the given path.
    """
    for item in root.findall(path):
        return item.text.strip()
    return None


def verify_project_log_dir(args, fname, y):
    """
    From fname, create pom.xml filename.
    From that pom.xml file, extract project[...]/name
    Verify the values of project: and log_dir: against that name.
    """
    if args.verbose:
        print(f"\nverify_project_log_dir({fname})", file=sys.stderr)
    project = y.get("project")
    if project is None:
        print(f"{fname}: project field is missing")
    if args.verbose:
        print(f"project={project}", file=sys.stderr)
    log_dir = y.get("log_dir")
    if log_dir is None:
        print(f"{fname}: log_dir field is missing")
        return False

    dash_log_dir = log_dir.replace("/", "-").replace(".", "-")
    if args.verbose:
        print(f"log_dir={log_dir}", file=sys.stderr)

    dfname = os.path.dirname(fname)
    if args.verbose:
        print(f"dfname={dfname}", file=sys.stderr)
    pom_fname = canonicalize_fname("../pom.xml" if dfname == "" else (dfname + "/../pom.xml"))
    if args.verbose:
        print(f"pom_fname={pom_fname}", file=sys.stderr)

    xml = get_xml(pom_fname)
    pom_name = get_xml_text(xml, f"{NS}name")
    
    if args.verbose:
        print(f"pom_name={pom_name}", file=sys.stderr)
        print(f"project={project}", file=sys.stderr)

    if pom_name is None:
        print(f"{fname}: {pom_fname} is missing a value for <project>/<name>")
        return False

    dash_pom_name = pom_name.replace("/", "-").replace(".", "-")
    dash_project = project.replace("/", "-").replace(".", "-")

    if args.verbose > 1:
        print(f"pom_fname={pom_fname}", file=sys.stderr)
        print(f"pom_name={pom_name}", file=sys.stderr)
        print(f"dash_pom_name={dash_pom_name}", file=sys.stderr)
        print(f"project={project}", file=sys.stderr)
        print(f"dash_project={dash_project}", file=sys.stderr)

    if dash_pom_name != dash_project:
        print(
            f"{fname}: project field (release-file: {project}) does not match pom.xml project/name value (pom.xml: {pom_name})"
        )
        return False

    if not dash_log_dir.startswith(dash_pom_name + "-"):
        print(
            f"{fname}: log_dir field (release-file: {log_dir}) does not start with pom.xml project/name value (pom.xml: {pom_name})"
        )
        return False

    return True


def dump_xml(elroot, prefix, *, include_children=False):
    """print info on an xml element"""
    # print(f"{prefix}elroot={elroot}")
    print(f"{prefix}elroot.tag={elroot.tag}")
    # print(f"{prefix}dir(elroot)={dir(elroot)}")
    print(f"{prefix}elroot.attrib={elroot.attrib}")
    print(f"{prefix}elroot.getchildren()={list(elroot)}")
    if include_children:
        for ch in elroot:
            dump_xml(ch, f"    {prefix}")


def find_matching_pom_file(args, container_name):
    """
    Loop through all of the pom files.
    """
    if args.verbose:
        print(f"\nfind_matching_pom_file({container_name})", file=sys.stderr)
    if not args.pom_files:
        print("The -p/--pom-files option was not specified")
        return None, None

    try:
        with open(args.pom_files) as fd:
            for pom_fname in fd:
                pom_fname = pom_fname.strip()
                if args.verbose > 1:
                    print(f"Looking in pom file {pom_fname} for {container_name}", file=sys.stderr)
                xml = get_xml(pom_fname)
                pom_group_id = get_xml_text(xml, f"{NS}groupId")
                pom_parent_group_id = get_xml_text(xml, f"{NS}parent/{NS}groupId")
                pom_docker_image_name = get_xml_text(xml, f"{NS}properties/{NS}docker.image.name")
                pom_container_name = get_xml_text(xml, f"{NS}properties/{NS}containerName")

                pom_artifact_id = get_xml_text(xml, f"{NS}artifactId")
                if pom_container_name is not None:
                    if args.verbose > 1:
                        print("using properties/containerName for the container name", file=sys.stderr)

                elif pom_group_id is not None:
                    if args.verbose > 1:
                        print("using groupId + '.' + artifactId for the container name", file=sys.stderr)
                    pom_container_name = f"{pom_group_id}.{pom_artifact_id}"

                else:
                    if args.verbose > 1:
                        print("using parent/groupId + '.' + artifactId for the container name", file=sys.stderr)
                    pom_container_name = f"{pom_parent_group_id}.{pom_artifact_id}"

                if args.verbose > 1:
                    print(f"{pom_fname}: pom_docker_image_name={pom_docker_image_name}", file=sys.stderr)
                    print(f"{pom_fname}: groupId={pom_group_id}", file=sys.stderr)
                    print(f"{pom_fname}: parent/groupId={pom_parent_group_id}", file=sys.stderr)
                    print(f"{pom_fname}: artifactId={pom_artifact_id}", file=sys.stderr)
                    print(f"{pom_fname}: pom_container_name={pom_container_name}", file=sys.stderr)

                if args.print_pom_info:
                    pom_version = get_xml_text(xml, f"{NS}version")
                    print(
                        f"{pom_fname}: {pom_container_name} {pom_version} [{pom_group_id}|{pom_parent_group_id} {pom_artifact_id}]"
                    )

                elif container_name.lower() == pom_container_name.lower():
                    if args.verbose:
                        print(f"FOUND {container_name} in {pom_fname}", file=sys.stderr)
                    return xml, pom_fname

                elif (
                    pom_docker_image_name is not None and "/" + container_name.lower() in pom_docker_image_name.lower()
                ):
                    if args.verbose:
                        print(f"FOUND {container_name} in {pom_fname}", file=sys.stderr)
                    return xml, pom_fname

    except Exception as e:
        sys.exit(f"Cannot read list of pom files {args.pom_files}: {e}")

    return None, None


def parent_pomfile(args, pomfile):
    """from a given pomfile name, generate a pomfile name in its parent directory"""
    if args.verbose > 2:
        print(f"pomfile={pomfile}", file=sys.stderr)
    dirname = os.path.dirname(pomfile)
    if dirname == "":
        dirname = "."

    dirdirname = os.path.dirname(dirname)
    if dirdirname == "":
        dirdirname = "."

    npomfile = dirdirname + "/pom.xml"
    ret = os.path.abspath(npomfile)
    if args.verbose > 2:
        print(f"    =>{ret}", file=sys.stderr)
    return ret


def expand_property_reference(args, curroot, fname, varname):
    """extract a property name from the current file or its parents"""

    pomfiles = [os.path.abspath("pom.xml")]
    with open(args.pom_files) as fp:
        for pom_fname in fp:
            pom_fname = pom_fname.strip()
            pomfiles.append(os.path.abspath(pom_fname))

    if args.verbose > 1:
        print(f"pomfiles={pomfiles}", file=sys.stderr)
        print(f"fname={fname}", file=sys.stderr)
        print(f"looking for properties/{varname}")
    ver = get_xml_text(curroot, f"{NS}properties/{NS}{varname}")
    if args.verbose > 1:
        print(f"ver={ver}", file=sys.stderr)

    if ver is not None:
        if args.verbose > 1:
            print(f"found {ver}", file=sys.stderr)
        return ver

    for _ in range(len(pomfiles)):
        fname = parent_pomfile(args, fname)
        if args.verbose > 1:
            print(f"parents: {fname}", file=sys.stderr)
        if fname in pomfiles:
            if args.verbose > 1:
                print(f"found {fname} in pomfiles", file=sys.stderr)
            xml = get_xml(fname)
            ver = get_xml_text(xml, f"{NS}properties/{NS}{varname}")
            if ver is not None:
                if args.verbose > 1:
                    print(f"found {ver}", file=sys.stderr)
                return ver

    return f"${{{varname}}}"


def verify_container(args, fname, y, version):  # pylint: disable=too-many-return-statements
    """
    Verify the contents of a container release file.
    For now, verify the version against distribution_type, container_release_tag, containers/*/version and git_tag.
    """

    if args.verbose:
        print(f"\nverify_container({fname},{version})", file=sys.stderr)

    # For containers, the file will look like this:
    #
    # distribution_type: 'container'
    # container_release_tag: '1.3.1'
    # project: 'dcaegen2-platform'
    # log_dir: 'dcaegen2-platform-mod-master-runtimeapi-merge-java/34'
    # ref: 5fc1aa06243a0f01a73663211382f8e98131b532
    # containers:
    #   - name: 'org.onap.dcaegen2.platform.mod.runtime-web'
    #     version: '1.3.1-SNAPSHOT-20211109T160418Z'
    # git_tag: '1.3.1-mod-runtimeapi'
    #
    # For a new release file, given the containers[*]/name
    # there should be a pom.xml file somewhere with the same
    # (project/parent/groupId OR project/groupId) + project/artifactId.
    # That pom.xml's project/version should also match the version of the filename.

    distribution_type = y.get("distribution_type", "not-found")
    if distribution_type != "container":
        print(f"{fname}: file is not a distribution_type: container, instead got {distribution_type}")
        return False

    container_release_tag = y.get("container_release_tag", "not-found")
    if container_release_tag != version:
        print(f"{fname}: file version {version} does not equal container_release_tag '{container_release_tag}'")
        return False

    containers = y.get("containers")
    if not containers:
        print(f"{fname}: No containers block found")
        return False

    if not isinstance(containers, list):
        print(f"{fname}: The containers block is ot a list")
        return False

    for l in containers:
        # print(f"l={l}")
        if not isinstance(l, dict):
            print(f"{fname}: The containers block is not a list of dictionaries")
            return False

        container_version = l.get("version", "not-found")
        if not container_version.startswith(version + "-"):
            print(
                f"{fname}: container version field '{container_version}' does not start with file version '{version}-'"
            )
            return False

        container_name = l.get("name")
        if container_name is None:
            print(f"{fname}: container name field is missing")
            return False

        if args.new:
            if args.verbose:
                print(f"{fname}: looking for a pom file matching {container_name}", file=sys.stderr)
            matching_pom_xml, pom_fname = find_matching_pom_file(args, container_name)
            if matching_pom_xml is None:
                print(f"{fname}: no pom file matching {container_name} was found")
                return False
            pom_version = get_xml_text(matching_pom_xml, f"{NS}version")
            if pom_version is None:
                pom_version2 = get_xml_text(matching_pom_xml, f"{NS}parent/{NS}version")
                if pom_version2 is None:
                    print(f"{fname}: No version or parent/version found in the matching pom.xml {pom_fname}")
                    return False
                if args.verbose:
                    print(f"{fname}: Using parent/version", file=sys.stderr)
                pom_version = pom_version2

            m = re.match(r"\${([^}]*)}$", str(pom_version))
            if m:
                if args.verbose:
                    print(f"FOUND a property reference: {pom_version}, {m.group(1)}", file=sys.stderr)
                pom_version = expand_property_reference(args, matching_pom_xml, pom_fname, m.group(1))
            if args.verbose:
                print(f"pom_version='{pom_version}', version='{version}'")
            if not (pom_version.startswith(version + "-") or pom_version == version):
                print(
                    f"{fname}: the version '{pom_version}' found in {pom_fname} does not match the filename version '{version}'"
                )
                return False

    if not verify_project_log_dir(args, fname, y):
        return False

    return True


def verify_maven(args, fname, y, version):
    """
    Verify the contents of a container release file.
    For now, verify the version against distribution_type, version and git_tag.
    """

    if args.verbose:
        print(f"\nverify_maven({fname},{version})", file=sys.stderr)

    # For maven files, the file will look like this:
    #
    # distribution_type: 'maven'
    # version: '1.7.3'
    # project: 'dcaegen2/platform'
    # log_dir: 'dcaegen2-platform-mod-bpgenerator-maven-stage-master/388'
    # git_tag: '1.7.3-bpgenerator'
    #
    # NOTE: git_tag may be optional

    distribution_type = y.get("distribution_type", "not-found")
    if distribution_type != "maven":
        print(f"{fname}: file is not a distribution_type: maven, instead got {distribution_type}")
        return False

    version_field = y.get("version", "not-found")
    if version_field != version:
        print(f"{fname}: file version {version} does not equal version field '{version_field}'")
        return False

    if not verify_project_log_dir(args, fname, y):
        return False

    return True


def verify(args, fname, y):
    """
    Verify the contents of a release file.
    """
    if args.verbose:
        print(f"\nverify({fname})", file=sys.stderr)

    b = os.path.basename(fname)
    m = re.match("([0-9]+([.][0-9]+)+)[^0-9].*", b)
    m2 = re.match(".*-([0-9]+([.][0-9]+)+)-[^0-9].*", b)
    if not m and not m2:
        print(f"Cannot determine the version of the file {fname}")
        return False

    if args.verbose > 2:
        if m:
            print(f"m.version={m.group(1)}", file=sys.stderr)
        else:
            print("m = null", file=sys.stderr)
        if m2:
            print(f"m2.version={m2.group(1)}", file=sys.stderr)
        else:
            print("m2 = null", file=sys.stderr)
    if m2:
        # Using the alternate scheme for finding the version from fname
        m = m2

    version = m.group(1)
    if args.verbose:
        print(f"version={version}", file=sys.stderr)
        # print(f"y={y}", file=sys.stderr)
        print(f"y.distribution_type={y['distribution_type']}", file=sys.stderr)

    ret = True

    git_tag = y.get("git_tag")
    if args.optional_git_tag and git_tag is None:
        pass

    elif git_tag is None:
        print(f"{fname}: git_tag field is missing")
        ret = False

    elif args.git_tag_requires_name and not git_tag.startswith(version + "-"):
        print(
            f"{fname}: git_tag field '{git_tag}' either does not start with the file version '{version}' or does not have a -name following"
        )
        ret = False

    elif not (git_tag.startswith(version + "-") or git_tag == version):
        print(f"{fname}: git_tag field '{git_tag}' does not equal or start with file version '{version}'")
        ret = False

    if ret:
        if fname.endswith("-container.yaml"):
            ret = verify_container(args, fname, y, version)
        else:
            ret = verify_maven(args, fname, y, version)

    return ret


def canonicalize_fname(nm):
    """ reduce a filename to its minimal version, removing all "foo/../" and "/./" sequences, and leading "/../". """
    # add some fenceposts
    snm = "/" + nm + "/"

    # "/./" => "/"
    snm = snm.replace("/./", "/").replace("/./", "/").replace("/./", "/")
    m = ReCheck()

    # "/foo/../" => "/
    while m.match("^(.*)(/[^./]+/[.][.]/)(.*)$", snm):
        snm = m.group(1) + "/" + m.group(3)
    
    # remove the fenceposts
    snm = snm[1:-1]

    # "/../foo/" => "/foo"
    while m.match("^(/[.][.])(/.*)$", snm):
        snm = m.group(2)

    return snm


def main():
    """
    Verify release files
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-T", "--template", action="store_true", help="Convert {{...}} to STRING before parsing")
    parser.add_argument("-s", "--silent", action="store_true", help="Do not print filenames unless an error is found")
    parser.add_argument(
        "-n",
        "--new",
        action="store_true",
        help="Treat the release file as new, which turns on additional checks against the pom files.",
    )
    parser.add_argument(
        "-g",
        "--optional-git-tag",
        action="store_true",
        help="Consider the git_tag to be optional in maven distribution_type files",
    )
    parser.add_argument(
        "-r",
        "--git-tag-requires-name",
        action="store_true",
        help="The git_tag is required to have a name after the version",
    )
    parser.add_argument("-p", "--pom-files", type=str, help="Filename holding all pom.xml filenames in the project")
    parser.add_argument(
        "-P", "--print-pom-info", action="store_true", help="Print the extracted info from the list of pom files"
    )
    parser.add_argument("-v", "--verbose", action="count", help="Be verbose", default=0)
    parser.add_argument("-V", "--version", action="store_true", help="Print the version")
    parser.add_argument("files", type=str, help="Files to verify", nargs="+")
    args = parser.parse_args()

    if args.version:
        print(f"Version: {GITVERSIONSTAMP}")

    if args.print_pom_info:
        find_matching_pom_file(args, "")
        sys.exit()

    ret = 0
    for fname in args.files:
        if not args.silent or args.verbose:
            print(f"{fname}:")
        try:
            with open(fname, "r") as fd:
                if args.template:
                    l = fd.read()
                    l2 = re.sub("{{[^}]*}}", "STRING", l)
                    with io.StringIO(l2) as fd2:
                        y = yaml.safe_load(fd2)
                else:
                    y = yaml.safe_load(fd)

                if not verify(args, fname, y):
                    ret = 1

        except:
            _, value, st = sys.exc_info()
            print(f"{fname}: {value}", file=sys.stderr)
            if args.verbose > 1:
                traceback.print_tb(st)
            ret = 1

    sys.exit(ret)


if __name__ == "__main__":
    main()
