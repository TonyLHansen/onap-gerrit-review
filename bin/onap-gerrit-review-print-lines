#!/usr/bin/env python3

"""
    Given a filename and list of line numbers,
    print the given lines.
"""

import argparse
import os
import sys

GITVERSIONSTAMP = "2022-07-28-12-19"


def expand(lines):
    """Given an array of one or more values such as
    n-m,a-b, expand the list out. That is, each n-m becomes
    n,n+1,n+2,...,m."""
    ret = []
    for l in lines:
        lsplit = l.split(",")
        for r in lsplit:
            rsplit = r.split("-")
            if len(rsplit) == 1:
                ret.append(r)
            elif len(rsplit) == 2:
                ret += list(range(int(rsplit[0]), int(rsplit[1]) + 1))
            else:
                sys.exit(f"Invalid range found: {r}")

    return ret


def main():
    """
    Verify release files
    """
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("-B", "--print-before", type=int, help="Print this many lines before")
    parser.add_argument("-A", "--print-after", type=int, help="Print this many lines after")
    parser.add_argument(
        "-H", "--highlight-line", action="store_true", help="Use environment variables smso/rmso to highlight the lines"
    )
    parser.add_argument("-v", "--verbose", action="count", help="Be verbose", default=0)
    parser.add_argument("-V", "--version", action="store_true", help="Print the version")
    parser.add_argument(
        "-s", "--swap-args", action="store_true", help="First argument is line list, remaining arguments are filenames"
    )
    parser.add_argument("file", type=str, help="File to get lines from", nargs=1)
    parser.add_argument("lines", type=str, help="Lines to print", nargs="+")
    args = parser.parse_args()

    if args.version:
        print(f"Version: {GITVERSIONSTAMP}")

    if args.swap_args:
        temp = args.file
        args.file = args.lines
        args.lines = temp

    args.lines = expand(args.lines)
    highlightable = {int(i) for i in args.lines}
    printable = {int(i) for i in args.lines}
    if args.print_before:
        for s in args.lines:
            i = int(s)
            for j in range(i - args.print_before, i):
                printable.add(j)

    if args.print_after:
        for s in args.lines:
            i = int(s)
            for j in range(i + 1, i + args.print_after + 1):
                printable.add(j)

    rmso = os.environ.get("rmso", "") if args.highlight_line else ""
    smso = os.environ.get("smso", "") if args.highlight_line else ""

    for fname in args.file:
        try:
            with open(fname) as fd:
                cnt = 0
                for l in fd:
                    cnt += 1
                    if cnt in printable:
                        if cnt in highlightable:
                            print(f"{fname}:{cnt}:{smso}{l.strip()}{rmso}")
                        else:
                            print(f"{fname}:{cnt}:{l.strip()}")

        except:
            _, value, _stacktrace = sys.exc_info()
            print(f"{fname}: {value}", file=sys.stderr)
            if args.verbose > 1:
                print(_stacktrace)


if __name__ == "__main__":
    main()
