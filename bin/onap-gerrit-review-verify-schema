#!/usr/bin/env python3

# This code is based on https://github.com/lfit/releng-global-jjb/blob/master/yaml-verify-schema.py

# SPDX-License-Identifier: EPL-1.0
##############################################################################
# Copyright (c) 2018 The Linux Foundation and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
##############################################################################
"""
Verify YAML Schema
"""
import argparse
import logging
import jsonschema
import yaml

LOADER = yaml.CSafeLoader if yaml.__with_libyaml__ else yaml.SafeLoader
VALIDATOR = (
    jsonschema.Draft202012Validator if hasattr(jsonschema, 'Draft202012Validator') else
    jsonschema.Draft201909Validator if hasattr(jsonschema, 'Draft201909Validator') else
    jsonschema.Draft7Validator if hasattr(jsonschema, 'Draft7Validator') else
    jsonschema.Draft6Validator if hasattr(jsonschema, 'Draft6Validator') else
    jsonschema.Draft4Validator if hasattr(jsonschema, 'Draft4Validator') else
    jsonschema.Draft3Validator if hasattr(jsonschema, 'Draft3Validator') else None
    )

def main():
    """Parse arguments and verify YAML"""
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('--schema', '-s', type=str, required=True)
    parser.add_argument('yaml', type=str, nargs='+')

    args = parser.parse_args()

    with open(args.schema) as fp:
        schema_file = yaml.load(fp, Loader=LOADER)

    validation = VALIDATOR(
        schema_file,
        format_checker=jsonschema.FormatChecker()
        )

    errors = 0
    for y in args.yaml:
        with open(y) as fp:
            yaml_file = yaml.load(fp, Loader=LOADER)

            for error in validation.iter_errors(yaml_file):
                errors += 1
                logging.error(error)

    if errors > 0:
        raise RuntimeError(f"{errors} issues invalidate the schema")


if __name__ == "__main__":
    main()
